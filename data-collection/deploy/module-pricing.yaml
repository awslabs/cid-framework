AWSTemplateFormatVersion: '2010-09-09'
Description: Retrieves Pricing data
Transform: 'AWS::LanguageExtensions'
Parameters:
  DatabaseName:
    Type: String
    Description: Name of the Athena database to be created to hold lambda information
    Default: optimization_data
  DestinationBucket:
    Type: String
    Description: Name of the S3 Bucket that exists or needs to be created to hold Pricing information
    AllowedPattern: (?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)
  DestinationBucketARN:
    Type: String
    Description: ARN of the S3 Bucket that exists or needs to be created to hold Pricing information
  CFDataName:
    Type: String
    Description: The name of what this cf is doing.
    Default: pricing
  GlueRoleARN:
    Type: String
    Description: Arn for the Glue Crawler role
  Schedule:
    Type: String
    Description: EventBridge Schedule to trigger the data collection
    Default: "rate(14 days)"
  ResourcePrefix:
    Type: String
    Description: This prefix will be placed in front of all roles created. Note you may wish to add a dash at the end to make more readable
  RegionsInScope:
    Type: String
    Description: "Comma Delimited list of AWS regions from which data about resources will be collected. Example: us-east-1,eu-west-1,ap-northeast-1"
  LambdaAnalyticsARN:
    Type: String
    Description: Arn of lambda for Analytics
  AwsServices:
    Type: CommaDelimitedList
    Default: AmazonRDS, AmazonEC2, AmazonElastiCache, AmazonES, AWSComputeSavingsPlan, AWSLambda, RegionalServices, RegionNames
    Description: Services for pulling price data
  CodeBucket:
    Type: String
    Description: S3 Bucket that exists and holds code
  StepFunctionExecutionRoleARN:
    Type: String
    Description: Common role for Step Function execution
  SchedulerExecutionRoleARN:
    Type: String
    Description: Common role for module Scheduler execution
  DataBucketsKmsKeysArns:
    Type: String
    Description: "ARNs of KMS Keys for data buckets and/or Glue Catalog. Comma separated list, no spaces. Keep empty if data Buckets and Glue Catalog are not Encrypted with KMS. You can also set it to '*' to grant decrypt permission for all the keys."
    Default: ""

Conditions:
  NeedDataBucketsKms: !Not [ !Equals [ !Ref DataBucketsKmsKeysArns, "" ] ]

Mappings:
  ServicesMap:

    AmazonRDS:
      path: rds
      partition:
      - { Name: region, Type: string }
      fields:
      - { Type: string, Name: "SKU" }
      - { Type: string, Name: "OfferTermCode" }
      - { Type: string, Name: "RateCode" }
      - { Type: string, Name: "TermType" }
      - { Type: string, Name: "PriceDescription" }
      - { Type: string, Name: "EffectiveDate" }
      - { Type: string, Name: "StartingRange" }
      - { Type: string, Name: "EndingRange" }
      - { Type: string, Name: "Unit" }
      - { Type: string, Name: "PricePerUnit" }
      - { Type: string, Name: "Currency" }
      - { Type: string, Name: "RelatedTo" }
      - { Type: string, Name: "LeaseContractLength" }
      - { Type: string, Name: "PurchaseOption" }
      - { Type: string, Name: "OfferingClass" }
      - { Type: string, Name: "Product Family" }
      - { Type: string, Name: "serviceCode" }
      - { Type: string, Name: "Location" }
      - { Type: string, Name: "Location Type" }
      - { Type: string, Name: "Instance Type" }
      - { Type: string, Name: "Current Generation" }
      - { Type: string, Name: "Instance Family" }
      - { Type: string, Name: "vCPU" }
      - { Type: string, Name: "Physical Processor" }
      - { Type: string, Name: "Clock Speed" }
      - { Type: string, Name: "Memory" }
      - { Type: string, Name: "Storage" }
      - { Type: string, Name: "Network Performance" }
      - { Type: string, Name: "Processor Architecture" }
      - { Type: string, Name: "Storage Media" }
      - { Type: string, Name: "Volume Type" }
      - { Type: string, Name: "Min Volume Size" }
      - { Type: string, Name: "Max Volume Size" }
      - { Type: string, Name: "Engine Code" }
      - { Type: string, Name: "Database Engine" }
      - { Type: string, Name: "Database Edition" }
      - { Type: string, Name: "License Model" }
      - { Type: string, Name: "Deployment Option" }
      - { Type: string, Name: "Group" }
      - { Type: string, Name: "Group Description" }
      - { Type: string, Name: "usageType" }
      - { Type: string, Name: "operation" }
      - { Type: string, Name: "ACU" }
      - { Type: string, Name: "Dedicated EBS Throughput" }
      - { Type: string, Name: "Deployment Model" }
      - { Type: string, Name: "Engine Major Version" }
      - { Type: string, Name: "Engine Media Type" }
      - { Type: string, Name: "Enhanced Networking Supported" }
      - { Type: string, Name: "Extended Support Pricing Year" }
      - { Type: string, Name: "Instance Type Family" }
      - { Type: string, Name: "LimitlessPreview" }
      - { Type: string, Name: "Normalization Size Factor" }
      - { Type: string, Name: "Pricing Unit" }
      - { Type: string, Name: "Processor Features" }
      - { Type: string, Name: "Region Code" }
      - { Type: string, Name: "serviceName" }
      - { Type: string, Name: "Volume Name" }
      jsonPaths: ["SKU","OfferTermCode","RateCode","TermType","PriceDescription","EffectiveDate","StartingRange","EndingRange","Unit","PricePerUnit","Currency","RelatedTo","LeaseContractLength","PurchaseOption","OfferingClass","Product Family","serviceCode","Location","Location Type","Instance Type","Current Generation","Instance Family","vCPU","Physical Processor","Clock Speed","Memory","Storage","Network Performance","Processor Architecture","Storage Media","Volume Type","Min Volume Size","Max Volume Size","Engine Code","Database Engine","Database Edition","License Model","Deployment Option","Group","Group Description","usageType","operation","ACU","Dedicated EBS Throughput","Deployment Model","Engine Major Version","Engine Media Type","Enhanced Networking Supported","Extended Support Pricing Year","Instance Type Family","LimitlessPreview","Normalization Size Factor","Pricing Unit","Processor Features","Region Code","serviceName","Volume Name"]

    AmazonEC2:
      path: ec2
      partition:
      - { Name: region, Type: string }
      fields:
      - { Type: string, Name: "SKU" }
      - { Type: string, Name: "OfferTermCode" }
      - { Type: string, Name: "RateCode" }
      - { Type: string, Name: "TermType" }
      - { Type: string, Name: "PriceDescription" }
      - { Type: string, Name: "EffectiveDate" }
      - { Type: string, Name: "StartingRange" }
      - { Type: string, Name: "EndingRange" }
      - { Type: string, Name: "Unit" }
      - { Type: string, Name: "PricePerUnit" }
      - { Type: string, Name: "Currency" }
      - { Type: string, Name: "RelatedTo" }
      - { Type: string, Name: "LeaseContractLength" }
      - { Type: string, Name: "PurchaseOption" }
      - { Type: string, Name: "OfferingClass" }
      - { Type: string, Name: "Product Family" }
      - { Type: string, Name: "serviceCode" }
      - { Type: string, Name: "Location" }
      - { Type: string, Name: "Location Type" }
      - { Type: string, Name: "Instance Type" }
      - { Type: string, Name: "Current Generation" }
      - { Type: string, Name: "Instance Family" }
      - { Type: string, Name: "vCPU" }
      - { Type: string, Name: "Physical Processor" }
      - { Type: string, Name: "Clock Speed" }
      - { Type: string, Name: "Memory" }
      - { Type: string, Name: "Storage" }
      - { Type: string, Name: "Network Performance" }
      - { Type: string, Name: "Processor Architecture" }
      - { Type: string, Name: "Storage Media" }
      - { Type: string, Name: "Volume Type" }
      - { Type: string, Name: "Max Volume Size" }
      - { Type: string, Name: "Max IOPS/volume" }
      - { Type: string, Name: "Max IOPS Burst Performance" }
      - { Type: string, Name: "Max throughput/volume" }
      - { Type: string, Name: "Provisioned" }
      - { Type: string, Name: "Tenancy" }
      - { Type: string, Name: "EBS Optimized" }
      - { Type: string, Name: "Operating System" }
      - { Type: string, Name: "License Model" }
      - { Type: string, Name: "Group" }
      - { Type: string, Name: "Group Description" }
      - { Type: string, Name: "Transfer Type" }
      - { Type: string, Name: "From Location" }
      - { Type: string, Name: "From Location Type" }
      - { Type: string, Name: "To Location" }
      - { Type: string, Name: "To Location Type" }
      - { Type: string, Name: "usageType" }
      - { Type: string, Name: "operation" }
      - { Type: string, Name: "AvailabilityZone" }
      - { Type: string, Name: "CapacityStatus" }
      - { Type: string, Name: "ClassicNetworkingSupport" }
      - { Type: string, Name: "Dedicated EBS Throughput" }
      - { Type: string, Name: "ECU" }
      - { Type: string, Name: "Elastic Graphics Type" }
      - { Type: string, Name: "Enhanced Networking Supported" }
      - { Type: string, Name: "From Region Code" }
      - { Type: string, Name: "GPU" }
      - { Type: string, Name: "GPU Memory" }
      - { Type: string, Name: "Instance" }
      - { Type: string, Name: "Instance Capacity - 10xlarge" }
      - { Type: string, Name: "Instance Capacity - 12xlarge" }
      - { Type: string, Name: "Instance Capacity - 16xlarge" }
      - { Type: string, Name: "Instance Capacity - 18xlarge" }
      - { Type: string, Name: "Instance Capacity - 24xlarge" }
      - { Type: string, Name: "Instance Capacity - 2xlarge" }
      - { Type: string, Name: "Instance Capacity - 32xlarge" }
      - { Type: string, Name: "Instance Capacity - 4xlarge" }
      - { Type: string, Name: "Instance Capacity - 8xlarge" }
      - { Type: string, Name: "Instance Capacity - 9xlarge" }
      - { Type: string, Name: "Instance Capacity - large" }
      - { Type: string, Name: "Instance Capacity - medium" }
      - { Type: string, Name: "Instance Capacity - metal" }
      - { Type: string, Name: "Instance Capacity - xlarge" }
      - { Type: string, Name: "instanceSKU" }
      - { Type: string, Name: "Intel AVX2 Available" }
      - { Type: string, Name: "Intel AVX Available" }
      - { Type: string, Name: "Intel Turbo Available" }
      - { Type: string, Name: "MarketOption" }
      - { Type: string, Name: "Normalization Size Factor" }
      - { Type: string, Name: "Physical Cores" }
      - { Type: string, Name: "Pre Installed S/W" }
      - { Type: string, Name: "Processor Features" }
      - { Type: string, Name: "Product Type" }
      - { Type: string, Name: "Region Code" }
      - { Type: string, Name: "Resource Type" }
      - { Type: string, Name: "serviceName" }
      - { Type: string, Name: "SnapshotArchiveFeeType" }
      - { Type: string, Name: "To Region Code" }
      - { Type: string, Name: "Volume API Name" }
      - { Type: string, Name: "VPCNetworkingSupport" }
      jsonPaths: ["SKU","OfferTermCode","RateCode","TermType","PriceDescription","EffectiveDate","StartingRange","EndingRange","Unit","PricePerUnit","Currency","RelatedTo","LeaseContractLength","PurchaseOption","OfferingClass","Product Family","serviceCode","Location","Location Type","Instance Type","Current Generation","Instance Family","vCPU","Physical Processor","Clock Speed","Memory","Storage","Network Performance","Processor Architecture","Storage Media","Volume Type","Max Volume Size","Max IOPS/volume","Max IOPS Burst Performance","Max throughput/volume","Provisioned","Tenancy","EBS Optimized","Operating System","License Model","Group","Group Description","Transfer Type","From Location","From Location Type","To Location","To Location Type","usageType","operation","AvailabilityZone","CapacityStatus","ClassicNetworkingSupport","Dedicated EBS Throughput","ECU","Elastic Graphics Type","Enhanced Networking Supported","From Region Code","GPU","GPU Memory","Instance","Instance Capacity - 10xlarge","Instance Capacity - 12xlarge","Instance Capacity - 16xlarge","Instance Capacity - 18xlarge","Instance Capacity - 24xlarge","Instance Capacity - 2xlarge","Instance Capacity - 32xlarge","Instance Capacity - 4xlarge","Instance Capacity - 8xlarge","Instance Capacity - 9xlarge","Instance Capacity - large","Instance Capacity - medium","Instance Capacity - metal","Instance Capacity - xlarge","instanceSKU","Intel AVX2 Available","Intel AVX Available","Intel Turbo Available","MarketOption","Normalization Size Factor","Physical Cores","Pre Installed S/W","Processor Features","Product Type","Region Code","Resource Type","serviceName","SnapshotArchiveFeeType","To Region Code","Volume API Name","VPCNetworkingSupport"]

    AmazonElastiCache:
      path: elasticache
      partition:
      - { Name: region, Type: string }
      fields:
      - { Type: string, Name: "SKU" }
      - { Type: string, Name: "OfferTermCode" }
      - { Type: string, Name: "RateCode" }
      - { Type: string, Name: "TermType" }
      - { Type: string, Name: "PriceDescription" }
      - { Type: string, Name: "EffectiveDate" }
      - { Type: string, Name: "StartingRange" }
      - { Type: string, Name: "EndingRange" }
      - { Type: string, Name: "Unit" }
      - { Type: string, Name: "PricePerUnit" }
      - { Type: string, Name: "Currency" }
      - { Type: string, Name: "LeaseContractLength" }
      - { Type: string, Name: "PurchaseOption" }
      - { Type: string, Name: "OfferingClass" }
      - { Type: string, Name: "Product Family" }
      - { Type: string, Name: "serviceCode" }
      - { Type: string, Name: "Location" }
      - { Type: string, Name: "Location Type" }
      - { Type: string, Name: "Instance Type" }
      - { Type: string, Name: "Current Generation" }
      - { Type: string, Name: "Instance Family" }
      - { Type: string, Name: "vCPU" }
      - { Type: string, Name: "Memory" }
      - { Type: string, Name: "Network Performance" }
      - { Type: string, Name: "Cache Engine" }
      - { Type: string, Name: "Storage Media" }
      - { Type: string, Name: "Transfer Type" }
      - { Type: string, Name: "usageType" }
      - { Type: string, Name: "operation" }
      - { Type: string, Name: "Region Code" }
      - { Type: string, Name: "serviceName" }
      - { Type: string, Name: "SSD" }
      jsonPaths: ["SKU","OfferTermCode","RateCode","TermType","PriceDescription","EffectiveDate","StartingRange","EndingRange","Unit","PricePerUnit","Currency","LeaseContractLength","PurchaseOption","OfferingClass","Product Family","serviceCode","Location","Location Type","Instance Type","Current Generation","Instance Family","vCPU","Memory","Network Performance","Cache Engine","Storage Media","Transfer Type","usageType","operation","Region Code","serviceName","SSD"]

    AmazonES:
      path: opensearch
      partition:
      - { Name: region, Type: string }
      fields:
      - { Type: string, Name: "SKU" }
      - { Type: string, Name: "OfferTermCode" }
      - { Type: string, Name: "RateCode" }
      - { Type: string, Name: "TermType" }
      - { Type: string, Name: "PriceDescription" }
      - { Type: string, Name: "EffectiveDate" }
      - { Type: string, Name: "StartingRange" }
      - { Type: string, Name: "EndingRange" }
      - { Type: string, Name: "Unit" }
      - { Type: string, Name: "PricePerUnit" }
      - { Type: string, Name: "Currency" }
      - { Type: string, Name: "LeaseContractLength" }
      - { Type: string, Name: "PurchaseOption" }
      - { Type: string, Name: "OfferingClass" }
      - { Type: string, Name: "Product Family" }
      - { Type: string, Name: "serviceCode" }
      - { Type: string, Name: "Location" }
      - { Type: string, Name: "Location Type" }
      - { Type: string, Name: "Instance Type" }
      - { Type: string, Name: "Current Generation" }
      - { Type: string, Name: "Instance Family" }
      - { Type: string, Name: "vCPU" }
      - { Type: string, Name: "Storage" }
      - { Type: string, Name: "Storage Media" }
      - { Type: string, Name: "usageType" }
      - { Type: string, Name: "operation" }
      - { Type: string, Name: "Compute type" }
      - { Type: string, Name: "ECU" }
      - { Type: string, Name: "Memory (GiB)" }
      - { Type: string, Name: "Region Code" }
      - { Type: string, Name: "serviceName" }
      jsonPaths: ["SKU","OfferTermCode","RateCode","TermType","PriceDescription","EffectiveDate","StartingRange","EndingRange","Unit","PricePerUnit","Currency","LeaseContractLength","PurchaseOption","OfferingClass","Product Family","serviceCode","Location","Location Type","Instance Type","Current Generation","Instance Family","vCPU","Storage","Storage Media","usageType","operation","Compute type","ECU","Memory (GiB)","Region Code","serviceName"]

    AWSComputeSavingsPlan:
      path: computesavingsplan
      partition:
      - { Name: region, Type: string }
      fields:
      - { Type: string, Name: "SKU" }
      - { Type: string, Name: "RateCode" }
      - { Type: string, Name: "Unit" }
      - { Type: string, Name: "EffectiveDate" }
      - { Type: string, Name: "DiscountedRate" }
      - { Type: string, Name: "Currency" }
      - { Type: string, Name: "DiscountedSKU" }
      - { Type: string, Name: "DiscountedServiceCode" }
      - { Type: string, Name: "DiscountedUsageType" }
      - { Type: string, Name: "DiscountedOperation" }
      - { Type: string, Name: "PurchaseOption" }
      - { Type: string, Name: "LeaseContractLength" }
      - { Type: string, Name: "LeaseContractLengthUnit" }
      - { Type: string, Name: "ServiceCode" }
      - { Type: string, Name: "UsageType" }
      - { Type: string, Name: "Operation" }
      - { Type: string, Name: "Description" }
      - { Type: string, Name: "Instance Family" }
      - { Type: string, Name: "Location" }
      - { Type: string, Name: "Location Type" }
      - { Type: string, Name: "Granularity" }
      - { Type: string, Name: "Product Family" }
      - { Type: string, Name: "DiscountedRegionCode" }
      jsonPaths: ["SKU","RateCode","Unit","EffectiveDate","DiscountedRate","Currency","DiscountedSKU","DiscountedServiceCode","DiscountedUsageType","DiscountedOperation","PurchaseOption","LeaseContractLength","LeaseContractLengthUnit","ServiceCode","UsageType","Operation","Description","Instance Family","Location","Location Type","Granularity","Product Family","DiscountedRegionCode"]

    AWSLambda:
      path: lambda
      partition:
      - { Name: region, Type: string }
      fields:
      - { Type: string, Name: "SKU" }
      - { Type: string, Name: "OfferTermCode" }
      - { Type: string, Name: "RateCode" }
      - { Type: string, Name: "TermType" }
      - { Type: string, Name: "PriceDescription" }
      - { Type: string, Name: "EffectiveDate" }
      - { Type: string, Name: "StartingRange" }
      - { Type: string, Name: "EndingRange" }
      - { Type: string, Name: "Unit" }
      - { Type: string, Name: "PricePerUnit" }
      - { Type: string, Name: "Currency" }
      - { Type: string, Name: "RelatedTo" }
      - { Type: string, Name: "Product Family" }
      - { Type: string, Name: "serviceCode" }
      - { Type: string, Name: "Location" }
      - { Type: string, Name: "Location Type" }
      - { Type: string, Name: "Group" }
      - { Type: string, Name: "Group Description" }
      - { Type: string, Name: "usageType" }
      - { Type: string, Name: "operation" }
      - { Type: string, Name: "Region Code" }
      - { Type: string, Name: "serviceName" }
      jsonPaths: ["SKU","OfferTermCode","RateCode","TermType","PriceDescription","EffectiveDate","StartingRange","EndingRange","Unit","PricePerUnit","Currency","RelatedTo","Product Family","serviceCode","Location","Location Type","Group","Group Description","usageType","operation","Region Code","serviceName"]

    RegionalServices:
      path: regionalservices
      partition:
      - { Name: date, Type: string }
      fields:
      - { Type: string, Name: "service" }
      - { Type: string, Name: "region" }
      jsonPaths: ["service","region"]

    RegionNames:
      path: regionnames
      partition:
      - { Name: date, Type: string }
      fields:
      - { Type: string, Name: 'domain' }
      - { Type: string, Name: 'geolocationCountry' }
      - { Type: string, Name: 'geolocationRegion' }
      - { Type: string, Name: 'longName' }
      - { Type: string, Name: 'partition' }
      - { Type: string, Name: 'region' }
      - { Type: string, Name: 'regionname' }
      jsonPaths: ['domain','geolocationCountry','geolocationRegion','longName','partition','region','regionname',"service"]

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ResourcePrefix}${CFDataName}-LambdaRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub "lambda.${AWS::URLSuffix}"
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Path: /
      Policies:
        - !If
          - NeedDataBucketsKms
          - PolicyName: "KMS"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "kms:GenerateDataKey"
                  Resource: !Split [ ',', !Ref DataBucketsKmsKeysArns ]
          - !Ref AWS::NoValue
        - PolicyName: "S3-Access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                Resource:
                  - !Sub "${DestinationBucketARN}/*"
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${CodeBucket}/*'
        - PolicyName: "AllowReadRegionsSSM"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ssm:GetParameter"
                  - "ssm:GetParametersByPath"
                Resource:
                  - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}::parameter/aws/service/global-infrastructure/regions/*"
                  - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}::parameter/aws/service/global-infrastructure/regions"

    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28 # Resource found with an explicit name, this disallows updates that require replacement of this resource
            reason: "Need explicit name to identify role actions"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ResourcePrefix}${CFDataName}-Lambda'
      Description: !Sub "LambdaFunction to retrieve ${CFDataName}"
      Runtime: python3.12
      Architectures: [x86_64]
      Code:
        ZipFile: |
          import os
          import csv
          #import time
          import json
          import logging
          import urllib3

          import boto3

          logger = logging.getLogger(__name__)
          logger.setLevel(getattr(logging, os.environ.get('LOG_LEVEL', 'INFO').upper(), logging.INFO))

          OFFERS_URL = 'https://pricing.us-east-1.amazonaws.com/offers/v1.0/aws/index.json'
          BASE_URL = '/'.join(OFFERS_URL.split('/')[:3])
          CODE_BUCKET = os.environ['CODE_BUCKET']
          BUCKET_NAME = os.environ["BUCKET_NAME"]
          PREFIX = os.environ["DEST_PREFIX"]
          REGIONS = [r.strip() for r in os.environ["REGIONS"].split(',') if r]
          TMP_FILE = "/tmp/data.json"

          def get_json(url):
              return json.loads(urllib3.PoolManager().request('GET', url).data)

          def download_file(url, save_path, chunk_size=100*1024*1024):
              ''' download file to disk '''
              response = urllib3.PoolManager().request('GET', url, preload_content=False)
              file_size = response.length_remaining
              print(f'Downloading {url}')
              for _ in range(5): # Skip first 5 lines
                  response.readline()
              with open(save_path, 'wb') as out_file:
                  for data in response.stream(chunk_size):
                      out_file.write(data)
                      print(f'downloaded {int(100 - 100 * response.length_remaining / file_size )} %')
              response.release_conn()
              print("Download completed!")

          def csv_to_json_and_multi_upload(csv_file_path, s3_bucket, s3_key, chunk_size=100*1024*1024):
              ''' take csv file and upload data as json '''
              s3_client = boto3.client('s3')
              mpu = s3_client.create_multipart_upload(Bucket=s3_bucket, Key=s3_key)
              parts = []
              part_number = 1
              with open(csv_file_path, 'r', encoding='utf-8') as csv_file:
                  csv_reader = csv.DictReader(csv_file)
                  chunk = ''
                  while True:
                      for row in csv_reader:
                          chunk += (json.dumps(row) + '\n')
                          if len(chunk) >= chunk_size:
                              break
                      if not chunk:
                          break
                      print(f'Uploading part {part_number}')
                      part = s3_client.upload_part(
                          Body=chunk,
                          Bucket=s3_bucket,
                          Key=s3_key,
                          PartNumber=part_number,
                          UploadId=mpu['UploadId']
                      )
                      parts.append({"PartNumber": part_number, "ETag": part['ETag']})
                      part_number += 1
                      chunk = ''

              print('Completing')
              s3_client.complete_multipart_upload(
                  Bucket=s3_bucket,
                  Key=s3_key,
                  UploadId=mpu['UploadId'],
                  MultipartUpload={"Parts": parts}
              )
              print(f"Upload Successful: s3://{s3_bucket}/{s3_key}")
              return True

          def upload_pricing(service, path):
              offers = get_json(OFFERS_URL)['offers']
              errors = ''
              logger.info(f'Getting regional pricing for {service}')
              try:
                  if service == 'AWSComputeSavingsPlan':
                      url = offers['AmazonEC2']['currentSavingsPlanIndexUrl']
                  else:
                      url = offers[service]['currentRegionIndexUrl']
                  regions = get_json(BASE_URL + url)["regions"]
              except Exception as exc: #pylint: disable=W0718
                  err = f'{service}: {exc}'
                  logger.warning(err)
                  return {
                      'statusCode': 500,
                      'errors': err,
                  }
              logger.debug(f"Regions {json.dumps(regions)}")
              if isinstance(regions, dict): # pricing data has different formats
                  regions = regions.values()

              # pull pricing for each region
              for region in regions:
                  region_code = region["regionCode"]
                  if REGIONS and (region_code not in REGIONS):
                      logger.debug(f'Filtering out {region_code}')
                      continue
                  try:
                      version_url =  region.get("versionUrl") or region.get("currentVersionUrl")
                      assert version_url
                      region_url = BASE_URL + version_url.replace(".json", ".csv") # we use CSV as json provided by api is not athena friendly
                      key = f"pricing/latest/pricing-{path}-data/region={region_code}/index.json"
                      download_file(region_url, '/tmp/tmp.csv')
                      csv_to_json_and_multi_upload('/tmp/tmp.csv', BUCKET_NAME, key)
                  except Exception as exc: #pylint: disable=W0718
                      err = f'{service}/{region_code}: {exc}'
                      logger.warning(err)
                      logger.exception(exc)
                      errors += err + '\n'
                      raise
              return {
                  'statusCode': 200,
                  'errors': errors,
              }

          def get_region_availability():
              offers = get_json(OFFERS_URL)['offers']
              data = []
              for ser, val in offers.items():
                  for region in get_json(BASE_URL + val['currentRegionIndexUrl'])['regions']:
                      data.append({'service': ser, 'region': region})
              return data

          def get_region_names():
              data = []
              ssm_client = boto3.client('ssm')
              active_regions = ssm_client.get_paginator('get_parameters_by_path').paginate(Path='/aws/service/global-infrastructure/regions').search('Parameters[].Value')
              for region in active_regions:
                  region_params = ssm_client.get_paginator('get_parameters_by_path').paginate(Path=f'/aws/service/global-infrastructure/regions/{region}/').search('Parameters[]')
                  region_data = {rp['Name'].split('/')[-1]:rp['Value'] for rp in region_params}
                  region_data['region'] = region
                  region_data['regionName'] = region_data['longName'] # for backward compatibility
                  data.append(region_data)
              return data

          def lambda_handler(event, context): #pylint: disable=W0613
              logger.info(f"Incoming event: {event}")
              try:
                  service = event['service']
                  path = event['path']
              except Exception: #pylint: disable=W0718
                  logger.error('please provide service and path. Will use EC2 and tmp for testing')
                  service = 'AmazonEC2'
                  path = 'tmp'

              date = 'current' # time.strftime('%Y-%m-%d')
              if service == "RegionNames":
                  data = get_region_names()
                  boto3.client('s3').put_object(
                      Bucket=BUCKET_NAME,
                      Key=f"pricing/latest/pricing-regionnames-data/date={date}/index.json",
                      Body='\n'.join([json.dumps(line) for line in data]),
                      ContentType='application/json'
                  )
                  return {'statusCode': 200}
              if service == 'RegionalServices':
                  data = get_region_availability()
                  boto3.client('s3').put_object(
                      Bucket=BUCKET_NAME,
                      Key=f"pricing/latest/pricing-regionalservices-data/date={date}/index.json",
                      Body='\n'.join([json.dumps(line) for line in data]),
                      ContentType='application/json'
                  )
                  return {'statusCode': 200}
              upload_pricing(service, path)
              return {'statusCode': 200}

      Handler: 'index.lambda_handler'
      MemorySize: 4086
      Timeout: 900
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref DestinationBucket
          CODE_BUCKET: !Ref CodeBucket
          DEST_PREFIX: !Ref CFDataName
          REGIONS: !Ref RegionsInScope
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89 # Lambda functions should be deployed inside a VPC
            reason: "No need for VPC in this case"
          - id: W92 # Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions
            reason: "No need for simultaneous execution"

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
      RetentionInDays: 60

  'Fn::ForEach::Service':
    - AwsService
    - !Ref AwsServices
    - 'ScheduleRefresh${AwsService}':
        Type: 'AWS::Scheduler::Schedule'
        Properties:
          Description: !Sub 'Scheduler for the ODC ${CFDataName}-${AwsService} module'
          Name: !Sub '${ResourcePrefix}${CFDataName}-${AwsService}-RefreshSchedule'
          ScheduleExpression: !Ref Schedule
          State: ENABLED
          FlexibleTimeWindow:
            MaximumWindowInMinutes: 30
            Mode: 'FLEXIBLE'
          Target:
            Arn: !Sub 'arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${ResourcePrefix}${CFDataName}-${AwsService}-StateMachine'
            RoleArn: !Ref SchedulerExecutionRoleARN

      'ModuleStepFunction${AwsService}':
        Type: AWS::StepFunctions::StateMachine
        Properties:
          StateMachineName: !Sub '${ResourcePrefix}${CFDataName}-${AwsService}-StateMachine'
          StateMachineType: STANDARD
          RoleArn: !Ref StepFunctionExecutionRoleARN
          DefinitionString: |
            {
              "Comment": "Orchestrate the collection of pricing data",
              "StartAt": "PricingCollectorInvoke",
              "States": {
                "PricingCollectorInvoke": {
                  "Type": "Task",
                  "Resource": "arn:${Partition}:states:::lambda:invoke",
                  "Parameters": {
                    "Payload": {
                      "service": "${Service}",
                      "path": "${Path}"
                    },
                    "FunctionName": "arn:${Partition}:lambda:${DeployRegion}:${Account}:function:${Prefix}pricing-Lambda"
                  },
                  "Retry": [
                    {
                      "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException",
                        "Lambda.TooManyRequestsException"
                      ],
                      "IntervalSeconds": 2,
                      "MaxAttempts": 6,
                      "BackoffRate": 2
                    }
                  ],
                  "Next": "CrawlerStepFunctionStartExecution"
                },
                "CrawlerStepFunctionStartExecution": {
                  "Type": "Task",
                  "Resource": "arn:${Partition}:states:::states:startExecution.sync:2",
                  "Parameters": {
                    "StateMachineArn": "arn:${Partition}:states:${DeployRegion}:${Account}:stateMachine:${Prefix}CrawlerExecution-StateMachine",
                    "Input": {
                      "behavior": "WAIT",
                      "crawlers": ${Crawlers}
                    }
                  },
                  "End": true
                }
              },
              "TimeoutSeconds": 1200
            }
          DefinitionSubstitutions:
            Service: !Ref AwsService
            Path: !FindInMap [ServicesMap, !Ref AwsService, path]
            Prefix: !Ref ResourcePrefix
            Crawlers: !Sub '["${ResourcePrefix}${CFDataName}-${AwsService}-Crawler"]'
            Module: !Ref CFDataName
            DeployRegion: !Ref AWS::Region
            Account: !Ref AWS::AccountId
            Partition: !Ref AWS::Partition
        Metadata:
          cfn-lint:
            config:
              ignore_checks:
                - E2532 # State Machine Definition needs to be formatted as JSON - in this case it is not as crawler can be a list

      'PricingCrawler${AwsService}':
        Type: AWS::Glue::Crawler
        Properties:
          Name: !Sub '${ResourcePrefix}${CFDataName}-${AwsService}-Crawler'
          Role: !Ref GlueRoleARN
          DatabaseName: !Ref DatabaseName
          SchemaChangePolicy:
            DeleteBehavior: LOG
            UpdateBehavior: LOG
          Targets:
            S3Targets:
              - Path:
                  Fn::Sub:
                    - "s3://${DestinationBucket}/${CFDataName}/latest/pricing-${path}-data/"
                    - path: !FindInMap [ServicesMap, !Ref AwsService, path]
          Configuration: |
            {
              "Version": 1.0,
              "Grouping": {
                "TableGroupingPolicy": "CombineCompatibleSchemas"
              },
              "CrawlerOutput": {
                "Tables": {"AddOrUpdateBehavior": "MergeNewColumns"},
                "Partitions": {"AddOrUpdateBehavior": "InheritFromTable"}
              }
            }

      'PricingTable${AwsService}':
        Type: AWS::Glue::Table
        Properties:
          CatalogId: !Ref "AWS::AccountId"
          DatabaseName: !Ref DatabaseName
          TableInput:
            Name:
              Fn::Sub:
                - 'pricing_${path}_data' # note '_' not '-'
                - path: !FindInMap [ServicesMap, !Ref AwsService, path]
            Owner: owner
            Retention: 0
            TableType: EXTERNAL_TABLE
            Parameters:
              classification: json
              compressionType: 'none'
              UPDATED_BY_CRAWLER: !Sub '${ResourcePrefix}${CFDataName}-${AwsService}-Crawler'
            PartitionKeys: !FindInMap [ServicesMap, !Ref AwsService, partition]
            StorageDescriptor:
              Columns: !FindInMap [ServicesMap, !Ref AwsService, fields]
              InputFormat: org.apache.hadoop.mapred.TextInputFormat
              Location:
                Fn::Sub:
                  - "s3://${DestinationBucket}/${CFDataName}/latest/pricing-${path}-data/"
                  - path: !FindInMap [ServicesMap, !Ref AwsService, path]
              OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
              SerdeInfo:
                Parameters:
                  paths: !Join [',', !FindInMap [ServicesMap, !Ref AwsService, jsonPaths]]
                SerializationLibrary: org.openx.data.jsonserde.JsonSerDe

  AnalyticsExecutor:
    Type: Custom::LambdaAnalyticsExecutor
    Properties:
      ServiceToken: !Ref LambdaAnalyticsARN
      Name: !Ref CFDataName
