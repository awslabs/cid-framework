AWSTemplateFormatVersion: '2010-09-09'
Description: Retrieves AWS Cost Explorer Rightsizing information from across an organization
Parameters:
  DatabaseName:
    Type: String
    Description: Name of the Athena database to be created to hold lambda information
    Default: optimization_data
  DestinationBucket:
    Type: String
    Description: Name of the S3 Bucket that exists or needs to be created to hold rightsizing information
    AllowedPattern: (?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)
  DestinationBucketARN:
    Type: String
    Description: ARN of the S3 Bucket that exists or needs to be created to hold rightsizing information
  ManagementRoleName:
    Type: String
    Description: The name of the IAM role that will be deployed in the management account which can retrieve AWS Organization data. KEEP THE SAME AS WHAT IS DEPLOYED INTO MANAGEMENT ACCOUNT
  CFDataName:
    Type: String
    Description: The name of what this cf is doing.
    Default: cost-explorer-rightsizing
  GlueRoleARN:
    Type: String
    Description: Arn for the Glue Crawler role
  Schedule:
    Type: String
    Description: EventBridge Schedule to trigger the data collection
    Default: "rate(14 days)"
  ResourcePrefix:
    Type: String
    Description: This prefix will be placed in front of all roles created. Note you may wish to add a dash at the end to make more readable
  LambdaAnalyticsARN:
    Type: String
    Description: Arn of lambda for Analytics
  AccountCollectorLambdaARN:
    Type: String
    Description: Arn of the Account Collector Lambda
  CodeBucket:
    Type: String
    Description: Source code bucket
  StepFunctionTemplate:
    Type: String
    Description: S3 key to the JSON template for the StepFunction
  StepFunctionExecutionRoleARN:
    Type: String
    Description: Common role for Step Function execution
  SchedulerExecutionRoleARN:
    Type: String
    Description: Common role for module Scheduler execution
  DataBucketsKmsKeysArns:
    Type: String
    Description: "ARNs of KMS Keys for data buckets and/or Glue Catalog. Comma separated list, no spaces. Keep empty if data Buckets and Glue Catalog are not Encrypted with KMS. You can also set it to '*' to grant decrypt permission for all the keys."
    Default: ""

Conditions:
  NeedDataBucketsKms: !Not [ !Equals [ !Ref DataBucketsKmsKeysArns, "" ] ]

Outputs:
  StepFunctionARN:
    Description: ARN for the module's Step Function
    Value: !GetAtt ModuleStepFunction.Arn

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ResourcePrefix}${CFDataName}-LambdaRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub "lambda.${AWS::URLSuffix}"
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Path: /
      Policies:
        - PolicyName: !Sub "${CFDataName}-ManagementAccount-LambdaRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sts:AssumeRole"
                Resource: !Sub "arn:${AWS::Partition}:iam::*:role/${ManagementRoleName}" # Need to assume a Read role in management accounts
        - !If
          - NeedDataBucketsKms
          - PolicyName: "KMS"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "kms:GenerateDataKey"
                  Resource: !Split [ ',', !Ref DataBucketsKmsKeysArns ]
          - !Ref AWS::NoValue
        - PolicyName: "S3-Access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                Resource:
                  - !Sub "${DestinationBucketARN}/*"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28 # Resource found with an explicit name, this disallows updates that require replacement of this resource
            reason: "Need explicit name to identify role actions"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ResourcePrefix}${CFDataName}-Lambda'
      Description: !Sub "Lambda function to retrieve ${CFDataName}"
      Runtime: python3.12
      Architectures: [x86_64]
      Code:
        ZipFile: |
          """ Collect RightSizing info from Cost Explorer and Upload to S3
          """
          import os
          import json
          import logging
          from datetime import date

          import boto3

          logger = logging.getLogger(__name__)
          logger.setLevel(getattr(logging, os.environ.get('LOG_LEVEL', 'INFO').upper(), logging.INFO))

          BUCKET = os.environ['BUCKET_NAME']
          ROLE = os.environ['ROLENAME']
          PREFIX = os.environ['PREFIX']

          BENEFITS_CONSIDERED = True
          TARGETS = {
              "RightsizingRecommendationsSameFamily": 'SAME_INSTANCE_FAMILY',
              "RightsizingRecommendationsCrossFamily": 'CROSS_INSTANCE_FAMILY',
          }

          def store_data_to_s3(data, payer_id):
              if not data:
                  logger.info("No data")
                  return
              key = date.today().strftime(f"{PREFIX}/{PREFIX}-data/payer_id={payer_id}/year=%Y/month=%m/day=%d/%Y-%m-%d.json")
              boto3.client('s3').put_object(
                  Bucket=BUCKET,
                  Key=key,
                  Body=json.dumps(data, default=str)
              )
              logger.info(f'File upload successful to s3://{BUCKET}/{key}')

          def process_one_management_acc(management_account_id):
              logger.debug('assuming role')
              region = boto3.session.Session().region_name
              partition = boto3.session.Session().get_partition_for_region(region_name=region)
              cred = boto3.client('sts').assume_role(
                  RoleArn=f"arn:{partition}:iam::{management_account_id}:role/{ROLE}",
                  RoleSessionName="data_collection"
              )['Credentials']
              cost_explorer = boto3.client(
                  "ce",
                  "us-east-1", #Must be "us-east-1"
                  aws_access_key_id=cred['AccessKeyId'],
                  aws_secret_access_key=cred['SecretAccessKey'],
                  aws_session_token=cred['SessionToken'],
              )
              logger.debug('Pulling info')
              #FIXME: propose a more athena friendly output format
              result = {
                  "RecommendationDate": date.today().strftime('%Y-%m-%d'),
                  "RightsizingRecommendationsSameFamily": [],
                  "RightsizingRecommendationsCrossFamily": [],
              }
              for key, target in TARGETS.items():
                  token = None
                  while True:
                      params = {
                          'Service': 'AmazonEC2',
                          'Configuration': {
                              'RecommendationTarget': target,
                              'BenefitsConsidered': BENEFITS_CONSIDERED,
                          },
                          'PageSize': 5000,
                      }
                      if token:
                          params["NextPageToken"] = token
                      response = cost_explorer.get_rightsizing_recommendation(**params)
                      result[key] += response["RightsizingRecommendations"]
                      token = response.get("NextPageToken")
                      if not token:
                          break
              store_data_to_s3(result, management_account_id)

          def lambda_handler(event, context):
              logger.info(f"Event data {json.dumps(event)}")
              if 'account' not in event:
                  raise ValueError(
                      "Please do not trigger this Lambda manually."
                      "Find the corresponding state machine in Step Functions and Trigger from there."
                  )
              account = json.loads(event["account"])
              try:
                  process_one_management_acc(account["account_id"])
              except Exception as exc:
                  logging.warning(f"{account['account_id']} :  {exc}")

              return "Successful"
      Handler: 'index.lambda_handler'
      MemorySize: 2688
      Timeout: 600
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref DestinationBucket
          PREFIX: !Ref CFDataName
          ROLENAME: !Ref ManagementRoleName
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89 # Lambda functions should be deployed inside a VPC
            reason: "No need for VPC in this case"
          - id: W92 #  Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions
            reason: "No need for simultaneous execution"

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
      RetentionInDays: 60

  Crawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Sub '${ResourcePrefix}${CFDataName}-Crawler'
      Role: !Ref GlueRoleARN
      DatabaseName: !Ref DatabaseName
      Targets:
        S3Targets:
          - Path: !Sub "s3://${DestinationBucket}/${CFDataName}/${CFDataName}-data/"

  ModuleStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub '${ResourcePrefix}${CFDataName}-StateMachine'
      StateMachineType: STANDARD
      RoleArn: !Ref StepFunctionExecutionRoleARN
      DefinitionS3Location:
        Bucket: !Ref CodeBucket
        Key: !Ref StepFunctionTemplate
      DefinitionSubstitutions:
        AccountCollectorLambdaARN: !Ref AccountCollectorLambdaARN
        ModuleLambdaARN: !GetAtt LambdaFunction.Arn
        Crawlers: !Sub '["${ResourcePrefix}${CFDataName}-Crawler"]'
        CollectionType: "Payers"
        Params: ''
        Module: !Ref CFDataName
        DeployRegion: !Ref AWS::Region
        Account: !Ref AWS::AccountId
        Prefix: !Ref ResourcePrefix
        Bucket: !Ref DestinationBucket

  ModuleRefreshSchedule:
    Type: 'AWS::Scheduler::Schedule'
    Properties:
      Description: !Sub 'Scheduler for the ODC ${CFDataName} module'
      Name: !Sub '${ResourcePrefix}${CFDataName}-RefreshSchedule'
      ScheduleExpression: !Ref Schedule
      State: ENABLED
      FlexibleTimeWindow:
        MaximumWindowInMinutes: 30
        Mode: 'FLEXIBLE'
      Target:
        Arn: !GetAtt ModuleStepFunction.Arn
        RoleArn: !Ref SchedulerExecutionRoleARN

  AnalyticsExecutor:
    Type: Custom::LambdaAnalyticsExecutor
    Properties:
      ServiceToken: !Ref LambdaAnalyticsARN
      Name: !Ref CFDataName

  AthenaQuerySameFamilyRightSizing:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Provides a summary view of the rightsizing recommendations for same family
      Name: cost-explorer-rightsizing-same-family
      QueryString: !Sub |
        WITH rightsizing_dates AS (
            SELECT
              "recommendations"."currentinstance"."resourceid"          AS "instance_id"
            , min(date_parse(concat("year", "month", "day"), '%Y%m%d')) AS "earliest_date"
            , max(date_parse(concat("year", "month", "day"), '%Y%m%d')) AS "latest_date"
            , count(*)                                                  AS "frequency"
            FROM (${DatabaseName}.cost_explorer_rightsizing_data
                CROSS JOIN UNNEST("rightsizingrecommendationssamefamily") t(recommendations))
            GROUP BY 1
        ),
        data AS (
            SELECT recommendations
            FROM (${DatabaseName}.cost_explorer_rightsizing_data
                CROSS JOIN UNNEST("rightsizingrecommendationssamefamily") t(recommendations))
            WHERE ("date_parse"("concat"("year", "month", "day"), '%Y%m%d') >= (current_timestamp - INTERVAL '7' DAY))
        ),
        all_tags AS (
            SELECT
              instanceid instance_id
            , exttags.key
            , exttags.value
            FROM inventory_ec2_instances_data
            CROSS JOIN UNNEST(inventory_ec2_instances_data."tags") AS t(exttags)
        ),
        chosen_tags AS (
            SELECT
              instance_id
            , kv['Name'] AS "Name"
            FROM (
                SELECT
                  instance_id
                , map_agg(key, value) AS kv
                FROM all_tags
                GROUP BY instance_id
            )
        ),
        recs AS (
            SELECT "recommendations"."currentinstance"."resourceid"                                          AS "instance_id"
                , "recommendations"."currentinstance"."instancename"                                        AS "instance_name"
                , "recommendations"."accountid"                                                             AS "account_id"
                , "recommendations"."currentinstance"."resourcedetails"."ec2resourcedetails"."instancetype" AS "instance_type"
                , CAST((CASE WHEN (
                    "recommendations"."currentinstance"."resourceutilization"."ec2resourceutilization"."maxcpuutilizationpercentage" =
                    '') THEN null
                              ELSE "recommendations"."currentinstance"."resourceutilization"."ec2resourceutilization"."maxcpuutilizationpercentage"
                        END) AS double)                                                                     AS "max_cpu_utilization"
                , CAST((CASE WHEN (
                    "recommendations"."currentinstance"."resourceutilization"."ec2resourceutilization"."maxmemoryutilizationpercentage" =
                    '') THEN null
                              ELSE "recommendations"."currentinstance"."resourceutilization"."ec2resourceutilization"."maxmemoryutilizationpercentage"
                        END) AS double)                                                                     AS "max_memory_utilization"
                , CAST((CASE WHEN (
                    "recommendations"."currentinstance"."resourceutilization"."ec2resourceutilization"."maxstorageutilizationpercentage" =
                    '') THEN null
                              ELSE "recommendations"."currentinstance"."resourceutilization"."ec2resourceutilization"."maxstorageutilizationpercentage"
                        END) AS double)                                                                     AS "max_disk_utilization"
                , "recommendations"."rightsizingtype"                                                       AS "recommended_action"
                , Try(CASE WHEN ("recommendations"."rightsizingtype" = 'Modify')
                            THEN "recommendations"."modifyrecommendationdetail"."targetinstances"[1]."resourcedetails"."ec2resourcedetails"."instancetype"
                        ELSE ''
                    END)                                                                                     AS "recommended_instance_type_1"
                , CAST("recommendations"."currentinstance"."monthlycost" AS double)                         AS "current_monthly_cost"
                , Try(CASE WHEN ("recommendations"."rightsizingtype" = 'Modify') THEN CAST(
            "recommendations"."modifyrecommendationdetail"."targetinstances"[1]."estimatedmonthlycost" AS double)
                        ELSE 0.0
                    END)                                                                                     AS "estimated_monthly_cost_type_1"
                , Try(CASE WHEN ("recommendations"."rightsizingtype" = 'Modify') THEN CAST(
            "recommendations"."modifyrecommendationdetail"."targetinstances"[1]."estimatedmonthlysavings" AS double)
                        ELSE CAST("recommendations"."currentinstance"."monthlycost" AS double)
                    END)                                                                                     AS "estimated_monthly_savings_type_1"
                  , Try(CASE WHEN ("recommendations"."rightsizingtype" = 'Modify')
                            THEN "recommendations"."modifyrecommendationdetail"."targetinstances"[2]."resourcedetails"."ec2resourcedetails"."instancetype"
                        ELSE ''
                    END)                                                                                     AS "recommended_instance_type_2"
                , CAST("recommendations"."currentinstance"."monthlycost" AS double)                         AS "current_monthly_cost"
                , Try(CASE WHEN ("recommendations"."rightsizingtype" = 'Modify') THEN CAST(
            "recommendations"."modifyrecommendationdetail"."targetinstances"[2]."estimatedmonthlycost" AS double)
                        ELSE 0.0
                    END)                                                                                     AS "estimated_monthly_cost_type_2"
                , Try(CASE WHEN ("recommendations"."rightsizingtype" = 'Modify') THEN CAST(
            "recommendations"."modifyrecommendationdetail"."targetinstances"[2]."estimatedmonthlysavings" AS double)
                        ELSE CAST("recommendations"."currentinstance"."monthlycost" AS double)
                    END)                                                                                     AS "estimated_monthly_savings_type_2"
            , Try(CASE WHEN ("recommendations"."rightsizingtype" = 'Modify')
                            THEN "recommendations"."modifyrecommendationdetail"."targetinstances"[3]."resourcedetails"."ec2resourcedetails"."instancetype"
                        ELSE ''
                    END)                                                                                     AS "recommended_instance_type_3"
                , CAST("recommendations"."currentinstance"."monthlycost" AS double)                         AS "current_monthly_cost"
                , Try(CASE WHEN ("recommendations"."rightsizingtype" = 'Modify') THEN CAST(
            "recommendations"."modifyrecommendationdetail"."targetinstances"[3]."estimatedmonthlycost" AS double)
                        ELSE 0.0
                    END)                                                                                     AS "estimated_monthly_cost_type_3"
                , Try(CASE WHEN ("recommendations"."rightsizingtype" = 'Modify') THEN CAST(
            "recommendations"."modifyrecommendationdetail"."targetinstances"[3]."estimatedmonthlysavings" AS double)
                        ELSE CAST("recommendations"."currentinstance"."monthlycost" AS double)
                    END)                                                                                     AS "estimated_monthly_savings_type_3"
            FROM data
        )
        SELECT
          recs.*
        , rightsizing_dates.earliest_date
        , rightsizing_dates.latest_date
        , rightsizing_dates.frequency
        , chosen_tags.name
        FROM recs
        JOIN rightsizing_dates ON ("rightsizing_dates"."instance_id" = "recs"."instance_id")
        LEFT JOIN chosen_tags ON ("chosen_tags"."instance_id" = "recs"."instance_id")

  AthenaQueryCrossFamilyRightSizing:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Provides a summary view of the rightsizing recommendations for cross family
      Name: cost-explorer-rightsizing-cross-family
      QueryString: !Sub |
        WITH rightsizing_dates AS (
            SELECT
              "recommendations"."currentinstance"."resourceid"          AS "instance_id"
            , min(date_parse(concat("year", "month", "day"), '%Y%m%d')) AS "earliest_date"
            , max(date_parse(concat("year", "month", "day"), '%Y%m%d')) AS "latest_date"
            , count(*)                                                  AS "frequency"
            FROM (${DatabaseName}.cost_explorer_rightsizing_data
                CROSS JOIN UNNEST("rightsizingrecommendationscrossfamily") t(recommendations))
            GROUP BY 1
        ),
        data AS (
            SELECT recommendations
            FROM (${DatabaseName}.cost_explorer_rightsizing_data
                CROSS JOIN UNNEST("rightsizingrecommendationscrossfamily") t(recommendations))
            WHERE ("date_parse"("concat"("year", "month", "day"), '%Y%m%d') >= (current_timestamp - INTERVAL '7' DAY))
        ),
        all_tags AS (
            SELECT
              instanceid instance_id
            , exttags.key
            , exttags.value
            FROM inventory_ec2_instances_data
            CROSS JOIN UNNEST(inventory_ec2_instances_data."tags") AS t(exttags)
        ),
        chosen_tags AS (
            SELECT
              instance_id
            , kv['Name'] AS "Name"
            FROM (
                SELECT
                  instance_id
                , map_agg(key, value) AS kv
                FROM all_tags
                GROUP BY instance_id
            )
        ),
        recs AS (
            SELECT "recommendations"."currentinstance"."resourceid"                                          AS "instance_id"
                , "recommendations"."currentinstance"."instancename"                                        AS "instance_name"
                , "recommendations"."accountid"                                                             AS "account_id"
                , "recommendations"."currentinstance"."resourcedetails"."ec2resourcedetails"."instancetype" AS "instance_type"
                , CAST((CASE WHEN (
                    "recommendations"."currentinstance"."resourceutilization"."ec2resourceutilization"."maxcpuutilizationpercentage" =
                    '') THEN null
                              ELSE "recommendations"."currentinstance"."resourceutilization"."ec2resourceutilization"."maxcpuutilizationpercentage"
                        END) AS double)                                                                     AS "max_cpu_utilization"
                , CAST((CASE WHEN (
                    "recommendations"."currentinstance"."resourceutilization"."ec2resourceutilization"."maxmemoryutilizationpercentage" =
                    '') THEN null
                              ELSE "recommendations"."currentinstance"."resourceutilization"."ec2resourceutilization"."maxmemoryutilizationpercentage"
                        END) AS double)                                                                     AS "max_memory_utilization"
                , CAST((CASE WHEN (
                    "recommendations"."currentinstance"."resourceutilization"."ec2resourceutilization"."maxstorageutilizationpercentage" =
                    '') THEN null
                              ELSE "recommendations"."currentinstance"."resourceutilization"."ec2resourceutilization"."maxstorageutilizationpercentage"
                        END) AS double)                                                                     AS "max_disk_utilization"
                , "recommendations"."rightsizingtype"                                                       AS "recommended_action"
                                    , Try(CASE WHEN ("recommendations"."rightsizingtype" = 'Modify')
                            THEN "recommendations"."modifyrecommendationdetail"."targetinstances"[1]."resourcedetails"."ec2resourcedetails"."instancetype"
                        ELSE ''
                    END)                                                                                     AS "recommended_instance_type_1"
                , CAST("recommendations"."currentinstance"."monthlycost" AS double)                         AS "current_monthly_cost"
                , Try(CASE WHEN ("recommendations"."rightsizingtype" = 'Modify') THEN CAST(
            "recommendations"."modifyrecommendationdetail"."targetinstances"[1]."estimatedmonthlycost" AS double)
                        ELSE 0.0
                    END)                                                                                     AS "estimated_monthly_cost_type_1"
                , Try(CASE WHEN ("recommendations"."rightsizingtype" = 'Modify') THEN CAST(
            "recommendations"."modifyrecommendationdetail"."targetinstances"[1]."estimatedmonthlysavings" AS double)
                        ELSE CAST("recommendations"."currentinstance"."monthlycost" AS double)
                    END)                                                                                     AS "estimated_monthly_savings_type_1"
                  , Try(CASE WHEN ("recommendations"."rightsizingtype" = 'Modify')
                            THEN "recommendations"."modifyrecommendationdetail"."targetinstances"[2]."resourcedetails"."ec2resourcedetails"."instancetype"
                        ELSE ''
                    END)                                                                                     AS "recommended_instance_type_2"
                , CAST("recommendations"."currentinstance"."monthlycost" AS double)                         AS "current_monthly_cost"
                , Try(CASE WHEN ("recommendations"."rightsizingtype" = 'Modify') THEN CAST(
            "recommendations"."modifyrecommendationdetail"."targetinstances"[2]."estimatedmonthlycost" AS double)
                        ELSE 0.0
                    END)                                                                                     AS "estimated_monthly_cost_type_2"
                , Try(CASE WHEN ("recommendations"."rightsizingtype" = 'Modify') THEN CAST(
            "recommendations"."modifyrecommendationdetail"."targetinstances"[2]."estimatedmonthlysavings" AS double)
                        ELSE CAST("recommendations"."currentinstance"."monthlycost" AS double)
                    END)                                                                                     AS "estimated_monthly_savings_type_2"
            , Try(CASE WHEN ("recommendations"."rightsizingtype" = 'Modify')
                            THEN "recommendations"."modifyrecommendationdetail"."targetinstances"[3]."resourcedetails"."ec2resourcedetails"."instancetype"
                        ELSE ''
                    END)                                                                                     AS "recommended_instance_type_3"
                , CAST("recommendations"."currentinstance"."monthlycost" AS double)                         AS "current_monthly_cost"
                , Try(CASE WHEN ("recommendations"."rightsizingtype" = 'Modify') THEN CAST(
            "recommendations"."modifyrecommendationdetail"."targetinstances"[3]."estimatedmonthlycost" AS double)
                        ELSE 0.0
                    END)                                                                                     AS "estimated_monthly_cost_type_3"
                , Try(CASE WHEN ("recommendations"."rightsizingtype" = 'Modify') THEN CAST(
            "recommendations"."modifyrecommendationdetail"."targetinstances"[3]."estimatedmonthlysavings" AS double)
                        ELSE CAST("recommendations"."currentinstance"."monthlycost" AS double)
                    END)                                                                                     AS "estimated_monthly_savings_type_3"
            FROM data
        )
        SELECT
          recs.*
        , rightsizing_dates.earliest_date
        , rightsizing_dates.latest_date
        , rightsizing_dates.frequency
        , chosen_tags.name
        FROM recs
        JOIN rightsizing_dates ON ("rightsizing_dates"."instance_id" = "recs"."instance_id")
        LEFT JOIN chosen_tags ON ("chosen_tags"."instance_id" = "recs"."instance_id")
