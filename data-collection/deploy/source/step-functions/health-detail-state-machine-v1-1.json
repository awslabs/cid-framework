{
    "Comment": "Collects Health Events",
    "StartAt": "SetGlobalVariables1",
    "States": {
      "SetGlobalVariables1": {
        "Type": "Pass",
        "QueryLanguage": "JSONata",
        "Assign": {
          "RunUUID": "{% $states.input.run_uuid %}",
          "SubUUID": ["{% $split($states.context.Execution.Id, ':')[7] %}"],
          "ExecutionStartTime": "{% $split($states.context.Execution.StartTime, /[-:T.]/) %}",
          "Module": "${Module}",
          "Params": "${Params}",
          "DataCollectionRegion": "${DeployRegion}",
          "DataCollectionAccountId": "${Account}",
          "Bucket": "{% $states.input.bucket %}",
          "MapKey": "{% $states.input.file %}",
          "Account": "{% $states.input.account %}",
          "IngestionTime": "{% $states.input.ingestion_time %}"
        },
        "Next": "SetGlobalVariables2"
      },
      "SetGlobalVariables2": {
        "Type": "Pass",
        "QueryLanguage": "JSONata",
        "Assign": {
          "LogKeyBase": "{% 'logs/'&$ExecutionStartTime[0]&'/'&$ExecutionStartTime[1]&'/'&$ExecutionStartTime[2]&'/'&$Module&'-stepfunction-' %}"
        },
        "Next": "DetailProcessorMap"
      },
      "DetailProcessorMap": {
        "Type": "Map",
        "QueryLanguage": "JSONata",
        "ItemProcessor": {
          "ProcessorConfig": {
            "Mode": "DISTRIBUTED",
            "ExecutionType": "STANDARD"
          },
          "StartAt": "DetailLambda",
          "States": {
            "DetailLambda": {
              "Type": "Task",
              "QueryLanguage": "JSONata",
              "Resource": "arn:${Partition}:states:::lambda:invoke",
              "Arguments": {
                "FunctionName": "${ModuleLambdaARN}",
                "Payload": "{% $states.input %}"
              },
              "Output": {
                "StartTime": "{% $states.context.State.EnteredTime %}",
                "ExecutionStartTime": "{% $split($states.context.Execution.StartTime, /[-:T.]/) %}",
                "Account": "{% $states.input.BatchInput.account %}",
                "Description": "",
                "RunUUID": "{% $states.input.BatchInput.run_uuid %}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Output": {
                    "StartTime": "{% $states.context.State.EnteredTime %}",
                    "ExecutionStartTime": "{% $split($states.context.Execution.StartTime, /[-:T.]/) %}",
                    "Account": "{% $states.input.BatchInput.account %}",
                    "Description": "{% $states.errorOutput %}",
                    "RunUUID": "{% $states.input.BatchInput.run_uuid %}"
                  },
                  "Next": "DetailLambdaExecutionLog"
                }
              ],
              "Next": "Continue"
            },
            "DetailLambdaExecutionLog": {
              "Type": "Task",
              "Resource": "arn:${Partition}:states:::aws-sdk:s3:putObject",
              "QueryLanguage": "JSONata",
              "Arguments": {
                "Bucket": "${DeployRegion}",
                "Key": "{% 'logs/'&$states.input.ExecutionStartTime[0]&'/'&$states.input.ExecutionStartTime[1]&'/'&$states.input.ExecutionStartTime[2]&'/health-events-stepfunction-ModuleLambda'&$split($states.context.Execution.Id, ':')[7]&'-'&$random()&'.json' %}",
                "Body": {
                  "StartTime": "{% $replace($states.input.StartTime,'Z','') %}",
                  "EndTime": "{% $replace($now(), 'Z', '') %}",
                  "DataCollectionRegion": "${DeployRegion}",
                  "DataCollectionAccountId": "${Account}",
                  "Module": "${Module}",
                  "ModuleFunction": "module-detail-lambda-task",
                  "Params": "${Params}",
                  "PayerId": "{% $states.input.Account.payer_id %}",
                  "AccountId": "{% $states.input.Account.account_id %}",
                  "Region": "",
                  "StatusCode": 500,
                  "SubCode": "",
                  "RecordCount": -1,
                  "Description": "{% $states.input.Description %}",
                  "DataLocation": "",
                  "RunUUID": "{% $states.input.RunUUID %}",
                  "SubUUID": ["{% $split($states.context.Execution.Id, ':')[7] %}"],
                  "Service": "StepFunction"
                }
              },
              "Next": "Continue",
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.All"
                  ],
                  "Next": "Continue"
                }
              ],
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "BackoffRate": 2,
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3
                }
              ]
            },
            "Continue": {
              "Type": "Succeed"
            }
          }
        },
        "MaxConcurrency": ${MaxConcurrentBatches},
        "ItemReader": {
          "Resource": "arn:${Partition}:states:::s3:getObject",
          "ReaderConfig": {
            "InputType": "JSON"
          },
          "Arguments": {
            "Bucket": "{% $Bucket %}",
            "Key": "{% $MapKey %}"
          }
        },
        "ItemBatcher": {
          "MaxItemsPerBatch": ${ItemsPerBatch}0,
          "BatchInput": {
            "account": "{% $Account %}",
            "ingestion_time": "{% $IngestionTime %}",
            "run_uuid": "{% $RunUUID %}"
          }
        },
        "Output": {
          "StartTime": "{% $states.context.State.EnteredTime %}",
          "StatusCode": 200,
          "Description": "Health Events detail Map task completed successfully"
        },
        "Catch": [
          {
            "ErrorEquals": [
              "States.ALL"
            ],
            "Output": {
              "StartTime": "{% $states.context.State.EnteredTime %}",
              "StatusCode": 500,
              "Description": "{% $states.errorOutput %}"
            },
            "Next": "DetailMapExecutionLog"
          }
        ],
        "Next": "DetailMapExecutionLog"
      },
      "DetailMapExecutionLog": {
        "Type": "Task",
        "Resource": "arn:${Partition}:states:::aws-sdk:s3:putObject",
        "QueryLanguage": "JSONata",
        "Arguments": {
          "Bucket": "{% $Bucket %}",
          "Key": "{% $LogKeyBase&'AccountMap-'&$RunUUID&'.json' %}",
          "Body": {
            "StartTime": "{% $replace($states.input.StartTime,'Z','') %}",
            "EndTime": "{% $replace($now(), 'Z', '') %}",
            "DataCollectionRegion": "{% $DataCollectionRegion %}",
            "DataCollectionAccountId": "{% $DataCollectionAccountId %}",
            "Module": "{% $Module %}",
            "ModuleFunction": "detail-map-processor-task",
            "Params": "{% $Params %}",
            "PayerId": "",
            "AccountId": "",
            "Region": "",
            "StatusCode": "{% $states.input.StatusCode %}",
            "SubCode": "",
            "RecordCount": -1,
            "Description": "{% $states.input.Description %}",
            "DataLocation": "",
            "RunUUID": "{% $RunUUID %}",
            "SubUUID": "{% $SubUUID %}",
            "Service": "StepFunction"
          }
        },
        "Next": "CrawlerStepFunction",
        "Catch": [
          {
            "ErrorEquals": [
              "States.ALL"
            ],
            "Next": "CrawlerStepFunction"
          }
        ],
        "Retry": [
          {
            "ErrorEquals": [
              "States.ALL"
            ],
            "BackoffRate": 2,
            "IntervalSeconds": 1,
            "MaxAttempts": 3
          }
        ]
      },
      "CrawlerStepFunction": {
        "Type": "Task",
        "QueryLanguage": "JSONata",
        "Resource": "arn:${Partition}:states:::states:startExecution.sync:2",
        "Arguments": {
          "StateMachineArn": "arn:${Partition}:states:${DeployRegion}:${Account}:stateMachine:${Prefix}CrawlerExecution-StateMachine",
          "Input": {
            "behavior": "WAIT",
            "crawlers": ${Crawlers}
          }
        },
        "Output": {
          "StartTime": "{% $states.context.State.EnteredTime %}",
          "StatusCode": 200,
          "Description": "Crawler task completed successfully"
        },
        "Catch": [
          {
            "ErrorEquals": [
              "States.ALL"
            ],
            "Next": "CrawlerStepFunctionExecutionLog",
            "Output": {
              "StartTime": "{% $states.context.State.EnteredTime %}",
              "StatusCode": 500,
              "Description": "{% $states.errorOutput %}"
            }
          }
        ],
        "Next": "CrawlerStepFunctionExecutionLog"
      },
      "CrawlerStepFunctionExecutionLog": {
        "Type": "Task",
        "Resource": "arn:${Partition}:states:::aws-sdk:s3:putObject",
        "QueryLanguage": "JSONata",
        "Arguments": {
          "Bucket": "{% $Bucket %}",
          "Key": "{% $LogKeyBase&'Crawler-'&$RunUUID&'.json' %}",
          "Body": {
            "StartTime": "{% $replace($states.input.StartTime,'Z','') %}",
            "EndTime": "{% $replace($now(), 'Z', '') %}",
            "DataCollectionRegion": "{% $DataCollectionRegion %}",
            "DataCollectionAccountId": "{% $DataCollectionAccountId %}",
            "Module": "{% $Module %}",
            "ModuleFunction": "detail-crawler-task",
            "Params": "{% $Params %}",
            "PayerId": "",
            "AccountId": "",
            "Region": "",
            "StatusCode": "{% $states.input.StatusCode %}",
            "SubCode": "",
            "RecordCount": -1,
            "Description": "{% $states.input.Description %}",
            "DataLocation": "",
            "RunUUID": "{% $RunUUID %}",
            "SubUUID": "{% $SubUUID %}",
            "Service": "StepFunction"
          }
        },
        "Catch": [
          {
            "ErrorEquals": [
              "States.ALL"
            ],
            "Next": "Pass"
          }
        ],
        "Retry": [
          {
            "ErrorEquals": [
              "States.ALL"
            ],
            "BackoffRate": 2,
            "IntervalSeconds": 1,
            "MaxAttempts": 3
          }
        ],
        "End": true
      },
      "Pass": {
        "Type": "Succeed"
      }
    },
    "TimeoutSeconds": 14400
  }