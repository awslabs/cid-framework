---
AWSTemplateFormatVersion: '2010-09-09'
Description: Main CF template that builds shared resources and other stacks
Parameters:
  DatabaseName:
    Type: String
    Description: Name of the Athena database to be created to hold lambda information
    Default: optimization_data
  DataBucketsKmsKeysArns:
    Type: String
    Description: KMS Key ARNs used for encrypting data in S3 buckets (comma separated)
  DestinationBucket:
    Type: String
    Description: Name of the S3 Bucket to be created to hold data information
    AllowedPattern: (?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)
  DestinationBucketARN:
    Type: String
    Description: ARN of the S3 Bucket that exists or needs to be created to hold rightsizing information
  MultiAccountRoleName:
    Type: String
    Description: Name of the IAM role deployed in all accounts which can retrieve AWS Data.
  CFDataName:
    Type: String
    Description: The name of what this cf is doing.
    Default: transit-gateway
  GlueRoleARN:
    Type: String
    Description: Arn for the Glue Crawler role
  Schedule:
    Type: String
    Description: EventBridge Schedule to trigger the data collection
    Default: "rate(14 days)"
  ResourcePrefix:
    Type: String
    Description: This prefix will be placed in front of all roles created. Note you may wish to add a dash at the end to make more readable
  RegionsInScope:
    Type: String
    Description: "Comma Delimited list of AWS regions from which data about resources will be collected. Example: us-east-1,eu-west-1,ap-northeast-1"
  LambdaAnalyticsARN:
    Type: String
    Description: Arn of lambda for Analytics
  AccountCollectorLambdaARN:
    Type: String
    Description: Arn of the Account Collector Lambda
  CodeBucket:
    Type: String
    Description: Source code bucket
  StepFunctionTemplate:
    Type: String
    Description: S3 key to the JSON template for the StepFunction
  StepFunctionExecutionRoleARN:
    Type: String
    Description: Common role for Step Function execution
  SchedulerExecutionRoleARN:
    Type: String
    Description: Common role for module Scheduler execution
  CURTable:
    Type: String
    Description: The name of your Cost and Usage Report table in Athena
    Default: cid_cur.cur

Outputs:
  StepFunctionARN:
    Description: ARN for the module's Step Function
    Value: !GetAtt ModuleStepFunction.Arn

Conditions:
  NeedDataBucketsKms: !Not [!Equals [!Ref DataBucketsKmsKeysArns, '']]

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ResourcePrefix}${CFDataName}-LambdaRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub "lambda.${AWS::URLSuffix}"
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Path: /
      Policies:
        - !If
          - NeedDataBucketsKms
          - PolicyName: "KMS"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "kms:GenerateDataKey"
                  Resource: !Split [ ',', !Ref DataBucketsKmsKeysArns ]
          - !Ref AWS::NoValue
        - PolicyName: "AssumeMultiAccountRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sts:AssumeRole"
                Resource: !Sub "arn:${AWS::Partition}:iam::*:role/${MultiAccountRoleName}"
        - PolicyName: "S3Access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                Resource:
                  - !Sub "${DestinationBucketARN}/*"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28 # Resource found with an explicit name, this disallows updates that require replacement of this resource
            reason: "Need explicit name to identify role actions"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ResourcePrefix}${CFDataName}-Lambda'
      Description: !Sub "Lambda function to retrieve ${CFDataName}"
      Runtime: python3.12
      Architectures: [x86_64]
      Code:
        ZipFile: |
          import os
          import json
          import logging
          from datetime import date, timedelta, datetime

          import boto3
          from botocore.client import Config
          from botocore.exceptions import ClientError

          BUCKET = os.environ["BUCKET_NAME"]
          PREFIX = os.environ["PREFIX"]
          role_name = os.environ['ROLENAME']
          local_file = "/tmp/data.json"
          REGIONS = [r.strip() for r in os.environ["REGIONS"].split(',') if r]

          logger = logging.getLogger(__name__)
          logger.setLevel(getattr(logging, os.environ.get('LOG_LEVEL', 'INFO').upper(), logging.INFO))

          last_day_of_prev_month = date.today().replace(day=1) - timedelta(days=1)
          start_day_of_prev_month = date.today().replace(day=1) - timedelta(days=last_day_of_prev_month.day)

          s3_client = boto3.client('s3')
          today = date.today()
          year = today.year
          month = today.month

          def lambda_handler(event, context):
              collection_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
              if 'account' not in event:
                  raise ValueError(
                      "Please do not trigger this Lambda manually."
                      "Find the corresponding state machine in Step Functions and Trigger from there."
                  )

              try:
                  account = json.loads(event["account"])
                  account_id = account["account_id"]
                  account_name = account["account_name"]
                  payer_id = account["payer_id"]
                  logger.info(f"Collecting data for account: {account_id}")

                  for region in REGIONS:
                      try:
                          cw_client = assume_role('cloudwatch', account_id, region)
                          ec2_client = assume_role('ec2', account_id, region)
                          tgw_attachment_results = []
                          final_result = []
                          list_tgw_attachments = ec2_client.describe_transit_gateway_attachments()
                          for item in list_tgw_attachments['TransitGatewayAttachments']:
                              tgw_attachment_results.append(item)

                          cw_result = []
                          for item in tgw_attachment_results:
                              response_in = metrics(cw_client, 'BytesIn', item)

                              with open(local_file, "w") as f:
                                  for cwitem in response_in['MetricDataResults']:
                                      cw_results = {
                                          'TGW': item['TransitGatewayId'],
                                          'NetworkingAccount': item['TransitGatewayOwnerId'],
                                          'CustomerAccount': item['ResourceOwnerId'],
                                          'TGW-Attachment': item['TransitGatewayAttachmentId'],
                                          'BytesIn': cwitem['Values'],
                                          'Region': region
                                      }

                                  response_out = metrics(cw_client, 'BytesOut', item)

                                  for cwitemout in response_out['MetricDataResults']:
                                      cw_results['BytesOut'] = cwitemout['Values']
                                      logger.info (cw_results)
                                      jsondata = json.dumps(cw_results)
                                      f.write(jsondata)
                                      f.write('\n')
                              #FIXME: check file size
                              boto3.client("s3").upload_file(
                                  "/tmp/data.json",
                                  BUCKET,
                                  datetime.now().strftime(f"{PREFIX}/{PREFIX}-data/payer_id={payer_id}/year=%Y/month=%m/day=%d/{item['TransitGatewayAttachmentId']}-{region}.json")
                              )

                      except Exception as e:
                          logger.warning("%s" % e)
                  logger.info("Done")
              except Exception as e:
                  logger.warning(e)

          def metrics(cw_client, byte, item):
              cw_data = cw_client.get_metric_data(
                  MetricDataQueries=[
                      {
                          'Id': 'tgwMetric',
                          'MetricStat': {
                              'Metric': {
                                  'Namespace': 'AWS/TransitGateway',
                                  'MetricName': f'{byte}',
                                  'Dimensions': [
                                      {
                                          'Name': 'TransitGatewayAttachment',
                                          'Value': item['TransitGatewayAttachmentId']
                                      },
                                      {
                                          'Name': 'TransitGateway',
                                          'Value': item['TransitGatewayId']
                                      },
                                  ]
                              },
                              'Period': 2592000,
                              'Stat': 'Sum',
                          },
                          'ReturnData': True},
                  ],
                  StartTime=start_day_of_prev_month.strftime("%Y-%m-%dT%H:%M:%SZ"),
                  EndTime=last_day_of_prev_month.strftime("%Y-%m-%dT%H:%M:%SZ"),
                  ScanBy='TimestampDescending'
              )
              return cw_data

          def assume_role(service, account_id, region_name):
              return assume_session(account_id, region_name).client(service, region_name=region_name)

          def assume_session(account_id, region):
              partition = boto3.session.Session().get_partition_for_region(region_name=region)
              cred = boto3.client('sts', region_name=region).assume_role(
                  RoleArn=f"arn:{partition}:iam::{account_id}:role/{role_name}",
                  RoleSessionName="data_collection"
              )['Credentials']
              return boto3.Session(
                  aws_access_key_id=cred['AccessKeyId'],
                  aws_secret_access_key=cred['SecretAccessKey'],
                  aws_session_token=cred['SessionToken']
              )
      Handler: 'index.lambda_handler'
      MemorySize: 2688
      Timeout: 300
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref DestinationBucket
          PREFIX: !Ref CFDataName
          ROLENAME: !Ref MultiAccountRoleName
          REGIONS: !Ref RegionsInScope
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89 # Lambda functions should be deployed inside a VPC
            reason: "No need for VPC in this case"
          - id: W92 #  Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions
            reason: "No need for simultaneous execution"

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
      RetentionInDays: 60

  Crawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Sub '${ResourcePrefix}${CFDataName}-Crawler'
      Role: !Ref GlueRoleARN
      DatabaseName: !Ref DatabaseName
      Targets:
        S3Targets:
          - Path: !Sub "s3://${DestinationBucket}/${CFDataName}/${CFDataName}-data/"

  ModuleStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub '${ResourcePrefix}${CFDataName}-StateMachine'
      StateMachineType: STANDARD
      RoleArn: !Ref StepFunctionExecutionRoleARN
      DefinitionS3Location:
        Bucket: !Ref CodeBucket
        Key: !Ref StepFunctionTemplate
      DefinitionSubstitutions:
        AccountCollectorLambdaARN: !Ref AccountCollectorLambdaARN
        ModuleLambdaARN: !GetAtt LambdaFunction.Arn
        Crawlers: !Sub '["${ResourcePrefix}${CFDataName}-Crawler"]'
        CollectionType: "LINKED"
        Params: ''
        Module: !Ref CFDataName
        DeployRegion: !Ref AWS::Region
        Account: !Ref AWS::AccountId
        Prefix: !Ref ResourcePrefix
        Bucket: !Ref DestinationBucket

  ModuleRefreshSchedule:
    Type: 'AWS::Scheduler::Schedule'
    Properties:
      Description: !Sub 'Scheduler for the ODC ${CFDataName} module'
      Name: !Sub '${ResourcePrefix}${CFDataName}-RefreshSchedule'
      ScheduleExpression: !Ref Schedule
      State: ENABLED
      FlexibleTimeWindow:
        MaximumWindowInMinutes: 30
        Mode: 'FLEXIBLE'
      Target:
        Arn: !GetAtt ModuleStepFunction.Arn
        RoleArn: !Ref SchedulerExecutionRoleARN
        Input: !Sub '{"module_lambda":"${LambdaFunction.Arn}","crawlers": ["${ResourcePrefix}${CFDataName}-Crawler"]}'

  AnalyticsExecutor:
    Type: Custom::LambdaAnalyticsExecutor
    Properties:
      ServiceToken: !Ref LambdaAnalyticsARN
      Name: !Ref CFDataName

  AthenaQueryCUR:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Provides a chargeback view of the transit gateway
      Name: transit_gateway_chargeback_cur
      QueryString: !Sub
        CREATE OR REPLACE VIEW "transit_gateway_chargeback" AS
        WITH
          cur_all AS (
          SELECT *
          FROM
          ${DatabaseName}.transit_gateway_data
        )
        , customer_tgw_data AS (
          SELECT
            bill_billing_period_start_date
          , bill_payer_account_id
          , bill_billing_entity
          , line_item_usage_start_date
          , line_item_usage_account_id
          , line_item_line_item_type
          , line_item_product_code
          , line_item_usage_type
          , line_item_operation
          , line_item_line_item_description
          , product_product_name
          , product_operation
          , product_product_family
          , product_servicecode
          , product_servicename
          , product_location
          , year
          , month
          , sum(CAST(line_item_usage_amount AS decimal(16,8))) as usage_amount
          , CAST((sum(line_item_usage_amount) / sum(sum(line_item_usage_amount)) OVER (PARTITION BY product_location)) AS decimal(5,2)) as percentage
          FROM
            ${CURTable}
          WHERE line_item_usage_account_id <> '${AWS::AccountId}'
          AND product_location LIKE '%US%'
          AND product_group = 'AWSTransitGateway'
          AND pricing_unit = 'GigaBytes'
          GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18
        )
        , network_all AS (
          SELECT
            bill_payer_account_id
          , bill_billing_period_start_date
          , CAST(sum(CASE WHEN (line_item_line_item_type = 'EdpDiscount') THEN line_item_unblended_cost ELSE 0 END) AS decimal(5,2)) as EDP_Discounts
          , CAST(sum(CASE WHEN (product_group = 'AWSTransitGateway') THEN line_item_unblended_cost ELSE 0 END) AS decimal(5,2)) as Total_Cost
          FROM
            ${CURTable}
          WHERE
          line_item_line_item_type <> 'Tax'
          AND line_item_usage_account_id = '${AWS::AccountId}'
          AND line_item_product_code = 'AmazonVPC'
          AND (line_item_operation = 'CreateVpnConnection'
          OR line_item_operation = 'TransitGatewayVPC'
          OR line_item_operation = 'TransitGatewayVPN'
          OR line_item_operation = 'TransitGatewayPeering')
          GROUP BY 1, 2
        )
        SELECT
          customer_tgw_data.bill_billing_period_start_date
        , customer_tgw_data.bill_payer_account_id
        , bill_billing_entity
        , line_item_usage_start_date
        , line_item_usage_account_id
        , line_item_line_item_type
        , line_item_product_code
        , line_item_usage_type
        , line_item_operation
        , line_item_line_item_description
        , product_product_name
        , product_operation
        , product_product_family
        , product_servicecode
        , product_servicename
        , Percentage as chargeback_proportion
        , Total_Cost as total_Networking_cost
        , (Total_Cost * Percentage) as chargeback_cost
        , Year
        , Month
        FROM
          customer_tgw_data
        LEFT JOIN network_all ON
          customer_tgw_data.bill_billing_period_start_date = network_all.bill_billing_period_start_date
          AND network_all.bill_payer_account_id = customer_tgw_data.bill_payer_account_id
        ORDER BY Percentage DESC

  AthenaQueryCW:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Provides a chargeback view of joined data from cloudwath and transigateway
      Name: transit_gateway_chargeback_cw
      QueryString: !Sub
        CREATE OR REPLACE VIEW "transit_gateway_chargeback_to_customer_final_results" AS
        WITH
          summary AS (
            SELECT
              *
            , (sum(bytesin[1]) + sum(bytesout[1]) OVER (PARTITION BY "bill_payer_account_id")) as total_data_transfer
            , (sum(bytesin[1]) + sum(bytesout[1])) as usage_account_dx_total
            FROM
              ${DatabaseName}.transit_gateway_data a
            LEFT JOIN ${DatabaseName}.transit_gateway_chargeback b ON a.customeraccount = b.line_item_usage_account_id AND a.year = b.year AND a.month = b.month
            GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30
            ORDER BY bytesIn DESC
          )
          SELECT
            *
          , (usage_account_dx_total / total_data_transfer) as chargeback_percentage
          , ("total_Networking_cost" * (usage_account_dx_total / total_data_transfer)) as chargeback_cost_final
          FROM
            summary
