AWSTemplateFormatVersion: '2010-09-09'
Description: Retrieves AWS Compute Optimizer information from across an organization
Parameters:
  DestinationBucket:
    Type: String
    Description: Name of the S3 Bucket to be created to hold data information.
    AllowedPattern: (?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)
  ManagementRoleName:
    Type: String
    Description: The name of the IAM role that will be deployed in the management account which can retrieve AWS Organization data. KEEP THE SAME AS WHAT IS DEPLOYED INTO MANAGEMENT ACCOUNT
  ManagementAccountID:
    Type: String
    AllowedPattern: ([a-z0-9\-, ]*?$)
    Description: "(Ex: 123456789,098654321,789054312) List of Payer IDs you wish to collect data for. Can just be one Accounts"
  CFDataName:
    Type: String
    Description: The name of what this cf is doing.
    Default: compute-optimizer
  Schedule:
    Type: String
    Description: EventBridge Schedule to trigger the data collection
    Default: "rate(14 days)"
  ResourcePrefix:
    Type: String
    Description: This prefix will be placed in front of all roles created. Note you may wish to add a dash at the end to make more readable
  BucketPrefix:
    Type: String
    # This stack will create other buckets with {DestinationBucket}.{region} so we need to keep the space for region prefix
    Description: This prefix will be used for buckets creation. Must be less shorter then 50 characters.
    AllowedPattern: (?=^.{3,49}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9\-])$)
  RegionsInScope:
    Type: String
    Description: "Comma Delimited list of AWS regions from which data about resources will be collected. Example: us-east-1,eu-west-1,ap-northeast-1"
  LambdaAnalyticsARN:
    Type: String
    Description: Arn of lambda for Analytics
  IncludeMemberAccounts:
    Type: String
    AllowedValues: ["yes", "no"]
    Default: 'yes'
    Description: Include Member Accounts or not. Set to 'yes' when working with payer
  AccountCollectorLambdaARN:
    Type: String
    Description: Arn of the Account Collector Lambda
  CodeBucket:
    Type: String
    Description: Source code bucket
  StepFunctionTemplate:
    Type: String
    Description: S3 key to the JSON template for the StepFunction
  StepFunctionExecutionRoleARN:
    Type: String
    Description: Common role for Step Function execution
  SchedulerExecutionRoleARN:
    Type: String
    Description: Common role for module Scheduler execution
  DataBucketsKmsKeysArns:
    Type: String
    Description: "ARNs of KMS Keys for data buckets and/or Glue Catalog. Comma separated list, no spaces. Keep empty if data Buckets and Glue Catalog are not Encrypted with KMS. You can also set it to '*' to grant decrypt permission for all the keys."
    Default: ""

Outputs:
  StepFunctionARN:
    Description: ARN for the module's Step Function
    Value: !GetAtt ModuleStepFunction.Arn

Resources:
  StackSetAdminRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:  !Sub '${ResourcePrefix}StackSetAdminRole'
      Description: "This role is used by cloudformation to create StackSets in different regions. See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs.html"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub "cloudformation.${AWS::URLSuffix}"
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: StackSetAdminRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sts:AssumeRole
                Resource: !Sub "arn:${AWS::Partition}:iam::*:role/${ResourcePrefix}ComputeOptimizer-StackSetExecutionRole"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28 # Resource found with an explicit name, this disallows updates that require replacement of this resource
            reason: "Need explicit name to identify role actions"

  StackSetExecutionRole:  #see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs.html
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ResourcePrefix}ComputeOptimizer-StackSetExecutionRole"
      Description: "This role is used by cloudformation to create StackSets in different regions. See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs.html"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt StackSetAdminRole.Arn
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StackSetParameterExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:DescribeStacks
                  - cloudformation:DeleteStack
                  - cloudformation:UpdateStack
                Resource: !Sub 'arn:${AWS::Partition}:cloudformation:*:${AWS::AccountId}:stack/StackSet-${ResourcePrefix}ComputeOptimizerBuckets*'
        - PolicyName: ResourcesPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:CreateBucket
                  - s3:DeleteBucket
                  - s3:ListBucket
                  - s3:Put*
                  - s3:Set*
                  - s3:Get*
                  - s3:Replicate*
                  - s3:DeleteBucketPolicy
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${BucketPrefix}${AWS::AccountId}.*'
              - Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:PassRole
                  - iam:DeleteRolePolicy
                  - iam:GetRolePolicy
                  - iam:PutRolePolicy
                  - iam:TagRole
                Resource:
                  - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${ResourcePrefix}Compute-Optimizer-Replication-*'
                  - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/StackSet-${ResourcePrefix}ComputeOptimizer*' # For Compatibility with older versions: Shorter version of StackSetName
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28 # Resource found with an explicit name, this disallows updates that require replacement of this resource
            reason: "Need explicit name to identify role actions"

  RegionalBucketsStackSet:
    Type: AWS::CloudFormation::StackSet
    # DependsOn: # managed via tags. DependsOn does not work in this case and Role can be deleted before StackSet
    #  - StackSetExecutionRole
    Properties:
      Description: !Sub "S3 buckets in multiple regions replicating data to s3://${DestinationBucket}."
      PermissionModel: SELF_MANAGED
      ManagedExecution:
        Active: true
      Parameters:
        - ParameterKey: Name
          ParameterValue: !Sub "${BucketPrefix}${AWS::AccountId}"
        - ParameterKey: DestinationBucket
          ParameterValue: !Ref DestinationBucket
        - ParameterKey: ManagementAccountID
          ParameterValue: !Ref ManagementAccountID
        - ParameterKey: ResourcePrefix
          ParameterValue: !Ref ResourcePrefix
        - ParameterKey: DataBucketsKmsKeysArns
          ParameterValue: !Ref DataBucketsKmsKeysArns
      StackInstancesGroup:
        - DeploymentTargets:
            Accounts:
              - !Ref "AWS::AccountId"
          Regions: !Split [ ',', !Ref RegionsInScope]
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_NAMED_IAM
      StackSetName: !Sub "${ResourcePrefix}ComputeOptimizerBuckets"
      AdministrationRoleARN: !GetAtt StackSetAdminRole.Arn
      ExecutionRoleName: !Sub "${ResourcePrefix}ComputeOptimizer-StackSetExecutionRole"
      TemplateBody: |
        AWSTemplateFormatVersion: '2010-09-09'
        Description: This template creates a bucket in a given region and configure a replication to the main bucket
        Parameters:
          Name:
            Type: String
            Description: Prefix of regional bucket name
          ManagementAccountID:
            Type: String
            Description: Comma separated IDs of Management Accounts that will send data to the bucket
          DestinationBucket:
            Type: String
            Description: A name of the main bucket where all data will be stored
          ResourcePrefix:
            Type: String
            Description: Resource Prefix
          DataBucketsKmsKeysArns:
            Type: String
            Description: "ARNs of KMS Keys for data buckets and/or Glue Catalog. Comma separated list, no spaces. Keep empty if data Buckets and Glue Catalog are not Encrypted with KMS. You can also set it to '*' to grant decrypt permission for all the keys."
            Default: ""
        Conditions:
          NeedDataBucketsKms: !Not [ !Equals [ !Ref DataBucketsKmsKeysArns, "" ] ]
        Resources:
          BucketPolicy:
            Type: AWS::S3::BucketPolicy
            Properties:
              Bucket: !Ref S3Bucket
              PolicyDocument:
                Version: 2012-10-17
                Statement:
                - Effect: Allow
                  Principal:
                    Service: !Sub "compute-optimizer.${AWS::URLSuffix}"
                  Action:
                  - s3:GetBucketAcl
                  - s3:GetBucketPolicyStatus
                  Resource: !Sub "arn:${AWS::Partition}:s3:::${Name}.${AWS::Region}"
                - Effect: Allow
                  Principal:
                    Service: !Sub "compute-optimizer.${AWS::URLSuffix}"
                  Action: s3:PutObject
                  Condition:
                    StringEquals:
                          s3:x-amz-acl:  bucket-owner-full-control
                          aws:SourceAccount: !Split [',', !Ref ManagementAccountID]
                  Resource: !Sub "arn:${AWS::Partition}:s3:::${Name}.${AWS::Region}/*"
                - Effect: Deny
                  Principal: "*"
                  Action: s3:*
                  Condition:
                    Bool:
                      aws:SecureTransport: 'false'
                  Resource:
                    - !Sub "arn:${AWS::Partition}:s3:::${Name}.${AWS::Region}"
                    - !Sub "arn:${AWS::Partition}:s3:::${Name}.${AWS::Region}/*"
                - Sid: AllowTLS12Only
                  Effect: Deny
                  Principal: "*"
                  Action: s3:*
                  Resource:
                    - !Sub "arn:${AWS::Partition}:s3:::${Name}.${AWS::Region}"
                    - !Sub "arn:${AWS::Partition}:s3:::${Name}.${AWS::Region}/*"
                  Condition:
                    NumericLessThan:
                      s3:TlsVersion: 1.2
          RegionalBucketReplicaRole:
            Type: AWS::IAM::Role
            Properties:
              RoleName: !Sub "${ResourcePrefix}Compute-Optimizer-Replication-${AWS::Region}"
              AssumeRolePolicyDocument:
                Statement:
                - Action: ['sts:AssumeRole']
                  Effect: Allow
                  Principal:
                    Service:
                      - !Sub "s3.${AWS::URLSuffix}"
              Policies:
              - PolicyName: Replication
                PolicyDocument:
                  Statement:
                  - Action:
                    - s3:GetReplicationConfiguration
                    - s3:ListBucket
                    Resource: !Sub arn:${AWS::Partition}:s3:::${Name}.${AWS::Region}
                    Effect: 'Allow'
                  - Action:
                    - s3:GetObjectVersionForReplication
                    - s3:GetObjectVersionAcl
                    Resource: !Sub arn:${AWS::Partition}:s3:::${Name}.${AWS::Region}/*
                    Effect: 'Allow'
                  - Action:
                    - s3:ReplicateObject
                    - s3:ReplicateTags
                    - s3:GetObjectVersionTagging
                    Effect: 'Allow'
                    Resource: !Sub arn:${AWS::Partition}:s3:::${DestinationBucket}/*
                  - !If
                    - NeedDataBucketsKms
                    - PolicyName: "KMS"
                      PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                          - Effect: "Allow"
                            Action:
                              - "kms:GenerateDataKey"
                            Resource: !Split [ ',', !Ref DataBucketsKmsKeysArns ]
                    - !Ref AWS::NoValue
          S3Bucket:
            Type: AWS::S3::Bucket
            DeletionPolicy: Delete
            Properties:
              BucketName: !Sub ${Name}.${AWS::Region}
              BucketEncryption:
                ServerSideEncryptionConfiguration:
                  - ServerSideEncryptionByDefault:
                      SSEAlgorithm: AES256
              ReplicationConfiguration:
                Role: !GetAtt [RegionalBucketReplicaRole, Arn]
                Rules:
                  - Id: Replication to the main bucket
                    Priority: 2
                    Filter:
                      Prefix: ''
                    Destination:
                      Bucket: !Sub arn:${AWS::Partition}:s3:::${DestinationBucket}
                      StorageClass: STANDARD
                    DeleteMarkerReplication:
                      Status: Disabled
                    Status: Enabled
              VersioningConfiguration:
                Status: Enabled
              PublicAccessBlockConfiguration:
                BlockPublicAcls : true
                BlockPublicPolicy : true
                IgnorePublicAcls : true
                RestrictPublicBuckets : true
              LifecycleConfiguration:
                Rules:
                  - Id: Cleanup
                    Prefix: ''
                    Status: Enabled
                    ExpirationInDays: 1
                  - Id: NoncurrentCleanup
                    Prefix: ''
                    Status: Enabled
                    NoncurrentVersionExpiration:
                      NoncurrentDays: 1
                      NewerNoncurrentVersions: 1
      Tags: # Hacky way to manage dependencies
        - Key: IgnoreMeIamOnlyWorkaround
          Value: !GetAtt StackSetExecutionRole.Arn

  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ResourcePrefix}${CFDataName}-LambdaRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub "lambda.${AWS::URLSuffix}"
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Path: /
      Policies:
        - PolicyName: !Sub "${CFDataName}-ManagementAccount-LambdaRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sts:AssumeRole"
                Resource: !Sub "arn:${AWS::Partition}:iam::*:role/${ManagementRoleName}" # Need to assume a Read role in all Management Accounts
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28 # Resource found with an explicit name, this disallows updates that require replacement of this resource
            reason: "Need explicit name to identify role actions"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ResourcePrefix}${CFDataName}-Lambda'
      Description: "LambdaFunction to start ComputeOptimizer export jobs"
      Runtime: python3.12
      Architectures: [x86_64]
      Environment:
        Variables:
          REGIONS: !Ref RegionsInScope
          BUCKET_PREFIX: !Sub "${BucketPrefix}${AWS::AccountId}"
          INCLUDE_MEMBER_ACCOUNTS: !Ref IncludeMemberAccounts
          ROLE_NAME: !Ref ManagementRoleName
          MANAGEMENT_ACCOUNT_IDS: !Ref ManagementAccountID
      Code:
        ZipFile: |
          import os
          import json
          import logging
          from datetime import date
          from functools import partial
          import boto3

          BUCKET_PREFIX = os.environ["BUCKET_PREFIX"]
          INCLUDE_MEMBER_ACCOUNTS = os.environ.get("INCLUDE_MEMBER_ACCOUNTS", 'yes').lower() == 'yes'
          REGIONS = [r.strip() for r in os.environ.get("REGIONS").split(',') if r]
          ROLE_NAME = os.environ['ROLE_NAME']
          ARCH = os.environ.get('ARCH', 'AWS_ARM64,CURRENT').split(',')

          logger = logging.getLogger(__name__)
          logger.setLevel(getattr(logging, os.environ.get('LOG_LEVEL', 'INFO').upper(), logging.INFO))

          def lambda_handler(event, context): #pylint: disable=unused-argument
              logger.info(f"Event data {json.dumps(event)}")
              if 'account' not in event:
                  raise ValueError(
                      "Please do not trigger this Lambda manually."
                      "Find the corresponding state machine in Step Functions and Trigger from there."
                  )
              account = json.loads(event["account"])
              payer_id = account["account_id"]
              try:
                  result_messages = []
                  error_messages = []
                  for region in REGIONS:
                      partition = boto3.session.Session().get_partition_for_region(region_name=region)
                      credentials = boto3.client('sts', region_name=region).assume_role(
                          RoleArn=f"arn:{partition}:iam::{payer_id}:role/{ROLE_NAME}",
                          RoleSessionName="data_collection"
                      )["Credentials"]
                      co = boto3.client(
                          "compute-optimizer",
                          region_name=region,
                          aws_access_key_id=credentials['AccessKeyId'],
                          aws_secret_access_key=credentials['SecretAccessKey'],
                          aws_session_token=credentials['SessionToken'],
                      )
                      export_funcs = {
                          'ec2_instance': partial(co.export_ec2_instance_recommendations, recommendationPreferences={'cpuVendorArchitectures': ARCH}),
                          'auto_scale':   partial(co.export_auto_scaling_group_recommendations, recommendationPreferences={'cpuVendorArchitectures': ARCH}),
                          'lambda':       co.export_lambda_function_recommendations,
                          'ebs_volume':   co.export_ebs_volume_recommendations,
                          'ecs_service':  co.export_ecs_service_recommendations,
                          'license':      co.export_license_recommendations,
                          'rds_database': partial(co.export_rds_database_recommendations, recommendationPreferences={'cpuVendorArchitectures': ARCH}),
                      }
                      bucket = BUCKET_PREFIX + '.' + region
                      logger.info(f"INFO: bucket={bucket}")
                      for name, func in export_funcs.items():
                          try:
                              res = func(
                                  includeMemberAccounts=INCLUDE_MEMBER_ACCOUNTS,
                                  s3DestinationConfig={
                                      'bucket': bucket,
                                      'keyPrefix': date.today().strftime(
                                          f'compute_optimizer/compute_optimizer_{name}/payer_id={payer_id}/year=%Y/month=%-m'
                                      ),
                                  }
                              )
                              result_messages.append(f"{region} {name} export queued. JobId: {res['jobId']}")
                          except co.exceptions.LimitExceededException:
                              result_messages.append(f"{region} {name} export is already in progress.")
                          except Exception as exc: #pylint: disable=broad-exception-caught
                              error_messages.append(f"ERROR: {region} {name} - {exc}")
                  if result_messages:
                      logger.info("Success:\n"+"\n".join(result_messages))
                  if error_messages:
                      raise Exception(f"There were {len(error_messages)} errors, out of {len(result_messages) + len(error_messages)} exports: \n" + "\n".join(error_messages)) #pylint: disable=broad-exception-raised
              except Exception as exc: #pylint: disable=broad-exception-caught
                  logger.error(f"Error {type(exc).__name__} with message {exc}")
      Handler: index.lambda_handler
      MemorySize: 2688
      Timeout: 300
      Role: !GetAtt LambdaFunctionRole.Arn
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89 # Lambda functions should be deployed inside a VPC
            reason: "No need for VPC in this case"
          - id: W92 #  Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions
            reason: "No need for simultaneous execution"

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
      RetentionInDays: 60

  ModuleStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub '${ResourcePrefix}${CFDataName}-StateMachine'
      StateMachineType: STANDARD
      RoleArn: !Ref StepFunctionExecutionRoleARN
      DefinitionS3Location:
        Bucket: !Ref CodeBucket
        Key: !Ref StepFunctionTemplate
      DefinitionSubstitutions:
        AccountCollectorLambdaARN: !Ref AccountCollectorLambdaARN
        ModuleLambdaARN: !GetAtt LambdaFunction.Arn
        Crawlers: '[]'
        CollectionType: "Payers"
        Params: ''
        Module: !Ref CFDataName
        DeployRegion: !Ref AWS::Region
        Account: !Ref AWS::AccountId
        Prefix: !Ref ResourcePrefix
        Bucket: !Ref DestinationBucket

  ModuleRefreshSchedule:
    Type: 'AWS::Scheduler::Schedule'
    Properties:
      Description: !Sub 'Scheduler for the ODC ${CFDataName} module'
      Name: !Sub '${ResourcePrefix}${CFDataName}-RefreshSchedule'
      ScheduleExpression: !Ref Schedule
      State: ENABLED
      FlexibleTimeWindow:
        MaximumWindowInMinutes: 30
        Mode: 'FLEXIBLE'
      Target:
        Arn: !GetAtt ModuleStepFunction.Arn
        RoleArn: !Ref SchedulerExecutionRoleARN

  CustomResourceFunctionFinalize:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt 'FinalizeLambdaExecutionRole.Arn'
      FunctionName: !Sub '${ResourcePrefix}${CFDataName}-Lambda-FinalizeSetup-DoNotRun'
      Description: "Lambda to Finalize Setup (call trigger lambda) or Start teardown (Cleanup buckets)"
      Runtime: python3.12
      Architectures: [ arm64 ]
      Code:
        ZipFile: |
          import os
          import uuid
          import json
          import boto3
          import botocore
          import urllib3
          import logging

          REGIONS = os.environ['REGIONS'].replace(' ', '').split(',')
          BUCKET_PREFIX = os.environ['BUCKET_PREFIX']
          LAMBDA_ARN = os.environ['TRIGGER_LAMBDA']

          logger = logging.getLogger(__name__)
          logger.setLevel(getattr(logging, os.environ.get('LOG_LEVEL', 'INFO').upper(), logging.INFO))

          def lambda_handler(event, context):
              logger.info(event)
              type_ = event.get('RequestType', 'Undef')
              if type_ == 'Create': res = on_create()
              elif type_ == 'Delete': res = on_delete()
              else: res = (True, f"Not supported operation: {type_}")
              response_data = {'Reason': res[1], 'uuid': str(uuid.uuid1()) }

              url = event.get('ResponseURL')
              body = {}
              body['Status'] = 'SUCCESS' if res[0] else 'FAILED'
              body['Reason'] = str(res[1]) + '\nSee the details in CloudWatch Log Stream: ' + context.log_stream_name
              body['PhysicalResourceId'] = context.log_stream_name
              body['StackId'] = event.get('StackId')
              body['RequestId'] = event.get('RequestId')
              body['LogicalResourceId'] = event.get('LogicalResourceId')
              body['NoEcho'] = False
              body['Data'] = response_data
              logger.info(body)
              if not url: return
              json_body=json.dumps(body)
              try:
                  http = urllib3.PoolManager()
                  response = http.request('PUT', url, body=json_body, headers={'content-type' : '', 'content-length' : str(len(json_body))}, retries=False)
                  logger.info(f"Status code: {response}" )
              except Exception as exc:
                  logger.info("send(..) failed executing requests.put(..): " + str(exc))

          def on_create():
              return (True, f'nothing to do')

          def on_delete():
              # Delete all buckets (CF cannot delete if they are non-empty)
              s3 = boto3.resource('s3')
              log = []
              for region in REGIONS:
                  name = BUCKET_PREFIX + "." + region
                  try:
                      bucket = s3.Bucket(name)
                      bucket.object_versions.delete()
                      log.append(f'INFO:  {name} is empty now')
                      bucket.delete()
                      log.append(f'INFO:  {name} deleted')
                  except botocore.exceptions.ClientError as exc:
                      status = exc.response["ResponseMetadata"]["HTTPStatusCode"]
                      errcode = exc.response["Error"]["Code"]
                      if status == 404:
                          log.append(f'INFO:  {name} - {errcode}')
                      else:
                          log.append(f'ERROR: {name} - {errcode}')
                  except Exception as exc:
                      log.append(f'ERROR: {name} Error: {exc}')
              logger.info('\n'.join(log))
              return (True, '\n'.join(log))
      Handler: 'index.lambda_handler'
      MemorySize: 2688
      Timeout: 300
      Environment:
        Variables:
          REGIONS: !Ref RegionsInScope
          BUCKET_PREFIX: !Sub "${BucketPrefix}${AWS::AccountId}"
          TRIGGER_LAMBDA:  !GetAtt LambdaFunction.Arn
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89 # Lambda functions should be deployed inside a VPC
            reason: "No need for VPC in this case"
          - id: W92 #  Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions
            reason: "No need for simultaneous execution"

  FinalizeLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub "lambda.${AWS::URLSuffix}"
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeAsync
                  - lambda:InvokeFunction
                Resource: !GetAtt LambdaFunction.Arn
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                Resource: !Sub 'arn:${AWS::Partition}:s3:::${BucketPrefix}${AWS::AccountId}.*/*'
              - Effect: Allow
                Action:
                  - s3:ListBucketVersions
                  - s3:DeleteBucket
                Resource: !Sub 'arn:${AWS::Partition}:s3:::${BucketPrefix}${AWS::AccountId}.*'
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  FinalizeBucketsSetup:
    DependsOn:
      - LambdaFunction
      - RegionalBucketsStackSet
      - FinalizeLambdaExecutionRole
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt CustomResourceFunctionFinalize.Arn

  AnalyticsExecutor:
    Type: Custom::LambdaAnalyticsExecutor
    Properties:
      ServiceToken: !Ref LambdaAnalyticsARN
      Name: !Ref CFDataName
