AWSTemplateFormatVersion: '2010-09-09'
Description: Retrieves Inventory data for the chosen service
Parameters:
  DatabaseName:
    Type: String
    Description: Name of the Athena database to be created to hold AWS Support Cases information
    Default: optimization_data
  DataBucketsKmsKeysArns:
    Type: String
    Description: KMS Key ARNs used for encrypting data in S3 buckets (comma separated)
  DestinationBucket:
    Type: String
    Description: Name of the S3 Bucket to be created to hold AWS Support Cases information
    AllowedPattern: (?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)
  DestinationBucketARN:
    Type: String
    Description: ARN of the S3 Bucket that exists or needs to be created to hold AWS Support Cases information
  MultiAccountRoleName:
    Type: String
    Description: Name of the IAM role deployed in all accounts which can retrieve AWS Support Cases Data.
  CFDataName:
    Type: String
    Description: The name of what this cf is doing.
    Default: support-cases
  GlueRoleARN:
    Type: String
    Description: Arn for the Glue Crawler role
  Schedule:
    Type: String
    Description: EventBridge Schedule to trigger the data collection
    Default: "rate(14 days)"
  ResourcePrefix:
    Type: String
    Description: This prefix will be placed in front of all roles created. Note you may wish to add a dash at the end to make more readable
  LambdaAnalyticsARN:
    Type: String
    Description: Arn of lambda for Analytics
  AccountCollectorLambdaARN:
    Type: String
    Description: Arn of the Account Collector Lambda
  CodeBucket:
    Type: String
    Description: Source code bucket
  StepFunctionTemplate:
    Type: String
    Description: S3 key to the JSON template for the StepFunction
  StepFunctionExecutionRoleARN:
    Type: String
    Description: Common role for Step Function execution
  SchedulerExecutionRoleARN:
    Type: String
    Description: Common role for module Scheduler execution

Outputs:
  StepFunctionARN:
    Description: ARN for the module's Step Function
    Value: !GetAtt ModuleStepFunction.Arn

Conditions:
  NeedDataBucketsKms: !Not [!Equals [!Ref DataBucketsKmsKeysArns, '']]

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ResourcePrefix}${CFDataName}-LambdaRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub "lambda.${AWS::URLSuffix}"
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Path: /
      Policies:
        - !If
          - NeedDataBucketsKms
          - PolicyName: "KMS"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "kms:GenerateDataKey"
                  Resource: !Split [ ',', !Ref DataBucketsKmsKeysArns ]
          - !Ref AWS::NoValue
        - PolicyName: "AssumeMultiAccountRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sts:AssumeRole"
                Resource: !Sub "arn:${AWS::Partition}:iam::*:role/${MultiAccountRoleName}"
        - PolicyName: "S3-Access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:PutObjectAcl"
                Resource:
                  - !Sub "${DestinationBucketARN}/*"
              - Effect: "Allow"
                Action:
                  - "s3:ListBucket"
                Resource:
                  - !Sub "${DestinationBucketARN}"
        - PolicyName: "Eventbridge-Access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "events:PutEvents"
                Resource:
                  - !Sub "arn:${AWS::Partition}:events:*:${AWS::AccountId}:event-bus/default"

    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28 # Resource found with an explicit name, this disallows updates that require replacement of this resource
            reason: "Need explicit name to identify role actions"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ResourcePrefix}${CFDataName}-Lambda'
      Description: !Sub "Lambda function to retrieve ${CFDataName}"
      Runtime: python3.12
      Architectures: [x86_64]
      Code:
        ZipFile: |
          import os
          import json
          import logging
          from datetime import date, timedelta, datetime

          import boto3

          BUCKET = os.environ['BUCKET_NAME']
          ROLE_NAME = os.environ['ROLE_NAME']
          MODULE_NAME = os.environ['MODULE_NAME']

          logger = logging.getLogger(__name__)
          logger.setLevel(getattr(logging, os.environ.get('LOG_LEVEL', 'INFO').upper(), logging.INFO))

          def lambda_handler(event, context): #pylint: disable=unused-argument
              logger.info(f"Incoming event: {json.dumps(event)}")
              key = "account"
              if key not in event:
                  logger.error(f"Lambda event parameter '{key}' not defined (fatal) in {MODULE_NAME} module. Please do not trigger this Lambda manually. "
                      f"Find the corresponding {MODULE_NAME} state machine in Step Functions and trigger from there."
                  )
                  raise RuntimeError(f"(MissingParameterError) Lambda event missing '{key}' parameter")

              account = json.loads(event[key])

              try:
                  main(account, ROLE_NAME, MODULE_NAME, BUCKET)
              except Exception as exc: #pylint: disable=broad-exception-caught
                  if "AccessDenied" in str(exc):
                      print(f'Failed to assume role {ROLE_NAME} in account {account}. Please make sure the role exists. {exc}')
                  else:
                      print(f'{exc}. Gracefully exiting from Lambda so we do not break all StepFunction Execution')
                  return {
                      'statusCode': 200
                  }
              return {
                  'statusCode': 200
              }

          def get_client_with_role(role_name, account_id, service, region):
              logger.debug(f"Attempting to get '{service}' client with role '{role_name}' from account '{account_id}' in region '{region}'")
              credentials = boto3.client('sts').assume_role(
                  RoleArn=f"arn:aws:iam::{account_id}:role/{role_name}",
                  RoleSessionName="data_collection"
              )['Credentials']
              logger.debug("Successfully assumed role, now getting client")
              client = boto3.client(
                  service,
                  region_name = region,
                  aws_access_key_id=credentials['AccessKeyId'],
                  aws_secret_access_key=credentials['SecretAccessKey'],
                  aws_session_token=credentials['SessionToken'],
              )
              logger.debug(f"Successfully created '{service}' client with role '{role_name}' from account '{account_id}' in region '{region}'")
              return client

          def to_json(obj):
              return json.dumps(
                  obj,
                  default=lambda x:
                      x.isoformat() if isinstance(x, (date, datetime)) else None
              )

          def main(account, role_name, module_name, bucket): #pylint: disable=too-many-locals
              account_id = account["account_id"]
              payer_id = account["payer_id"]
              account_name = account.get("account_name", None)
              support = get_client_with_role(role_name, account_id, region="us-east-1", service="support")
              s3 = boto3.client('s3')

              default_start_date = (datetime.now().date() - timedelta(days=365)).strftime('%Y-%m-%d') # Case communications are available for 12 months after creation.

              status = {
                  "last_read": default_start_date,
                  "account_id": account_id,
              }
              status_key = f"{module_name}/{module_name}-status/payer_id={payer_id}/{account_id}.json"
              try:
                  status = json.loads(
                      s3.get_object(
                          Bucket=bucket,
                          Key=status_key,
                      )['Body'].read().decode('utf-8')
                  )
              except s3.exceptions.NoSuchKey as exc:
                  if exc.response['Error']['Code'] != 'NoSuchKey': # this is fine if there no status file
                      raise

              case_iterator = (
                  support
                  .get_paginator('describe_cases')
                  .paginate(
                      afterTime=status["last_read"],
                      includeCommunications=False,
                      includeResolvedCases=True,
                  )
                  .search("""cases[].{
                      CaseId: caseId,
                      DisplayId: displayId,
                      Subject: subject,
                      Status: status,
                      ServiceCode: serviceCode,
                      CategoryCode: categoryCode,
                      SeverityCode: severityCode,
                      SubmittedBy: submittedBy,
                      TimeCreated: timeCreated,
                      CCEmailAddresses: ccEmailAddresses,
                      Language: language
                  }""")
              )

              for index, data in enumerate(case_iterator):
                  case_id = data['CaseId']
                  case_date = datetime.strptime(data["TimeCreated"], '%Y-%m-%dT%H:%M:%S.%fZ')
                  with open("/tmp/tmp.json", "w", encoding='utf-8') as f:
                      data['AccountAlias'] = account_name
                      data['Summary'] = ''
                      f.write(to_json(data)) # single line per file
                  key = case_date.strftime(
                      f"{module_name}/" +
                      f"{module_name}-data/" +
                      f"payer_id={payer_id}/" +
                      f"account_id={account_id}/" +
                      f"year=%Y/month=%m/day=%d/{case_id}.json"
                  )
                  s3.upload_file("/tmp/tmp.json", bucket, key)
                  logger.debug(f"Data stored to s3://{bucket}/{key}")

                  communication_iterator = (
                      support
                      .get_paginator('describe_communications')
                      .paginate(caseId=case_id)
                      .search("""communications[].{
                          CaseId: caseId,
                          Body: body,
                          SubmittedBy: submittedBy,
                          TimeCreated: timeCreated,
                          AttachmentSet: attachmentSet[0]
                      }""")
                  )
                  with open("/tmp/tmp.json", "w", encoding='utf-8') as f:
                      for communication in communication_iterator:
                          communication['AccountAlias'] = account_name
                          f.write(to_json(communication) + '\n')
                  key = case_date.strftime(
                      f"{module_name}/" +
                      f"{module_name}-communications/" +
                      f"payer_id={payer_id}/" +
                      f"account_id={account_id}/" +
                      f"year=%Y/month=%m/day=%d/{case_id}.json"
                  )
                  boto3.client('s3').upload_file("/tmp/tmp.json", bucket, key)
                  logger.info(f"Processed a total of {index+1} support cases")
                  logger.info(f"Sending Support case {data['CaseId']} for summarization ...")
                  message = {
                      'Bucket': bucket,
                      'CommunicationsKey': key
                  }
                  eventbridge = boto3.client('events')
                  response = eventbridge.put_events(
                      Entries=[
                          {
                              'Source': 'supportcases.datacollection.cid.aws',
                              'DetailType': 'Event',
                              'Detail': json.dumps(message)
                          }
                      ]
                  )
                  failed_entry_count = response['FailedEntryCount']
                  if failed_entry_count > 0:
                      logger.info(f"Failed to send support case event for {case_id} to Eventbridge default bus.")
                  else:
                      logger.info(f"Support case event for {case_id} successfully sent to Eventbridge default bus and has Event ID: {response['Entries'][0]['EventId']}")

              status["last_read"] = datetime.now().strftime('%Y-%m-%d')
              s3.put_object(
                  Bucket=bucket,
                  Key=status_key,
                  Body=json.dumps(status),
                  ContentType='application/json',
              )
      Handler: 'index.lambda_handler'
      MemorySize: 2688
      Timeout: 300
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref DestinationBucket
          ROLE_NAME: !Ref MultiAccountRoleName
          MODULE_NAME: !Ref CFDataName
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89 # Lambda functions should be deployed inside a VPC
            reason: "No need for VPC in this case"
          - id: W92 #  Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions
            reason: "No need for simultaneous execution"

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
      RetentionInDays: 60

  Crawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Sub '${ResourcePrefix}${CFDataName}-Crawler'
      Role: !Ref GlueRoleARN
      DatabaseName: !Ref DatabaseName
      Targets:
        S3Targets:
          - Path: !Sub "s3://${DestinationBucket}/${CFDataName}/${CFDataName}-data/"
          - Path: !Sub "s3://${DestinationBucket}/${CFDataName}/${CFDataName}-communications/"
          - Path: !Sub "s3://${DestinationBucket}/${CFDataName}/${CFDataName}-status/"
      Configuration: "{\"Version\":1.0,\"Grouping\":{\"TableGroupingPolicy\":\"CombineCompatibleSchemas\"}}"

  ModuleStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub '${ResourcePrefix}${CFDataName}-StateMachine'
      StateMachineType: STANDARD
      RoleArn: !Ref StepFunctionExecutionRoleARN
      DefinitionS3Location:
        Bucket: !Ref CodeBucket
        Key: !Ref StepFunctionTemplate
      DefinitionSubstitutions:
        AccountCollectorLambdaARN: !Ref AccountCollectorLambdaARN
        ModuleLambdaARN: !GetAtt LambdaFunction.Arn
        Crawlers: !Sub '["${ResourcePrefix}${CFDataName}-Crawler"]'
        CollectionType: "LINKED"
        Params: ''
        Module: !Ref CFDataName
        DeployRegion: !Ref AWS::Region
        Account: !Ref AWS::AccountId
        Prefix: !Ref ResourcePrefix
        Bucket: !Ref DestinationBucket

  ModuleRefreshSchedule:
    Type: 'AWS::Scheduler::Schedule'
    Properties:
      Description: !Sub 'Scheduler for the ODC ${CFDataName} module'
      Name: !Sub '${ResourcePrefix}${CFDataName}-RefreshSchedule'
      ScheduleExpression: !Ref Schedule
      State: ENABLED
      FlexibleTimeWindow:
        MaximumWindowInMinutes: 30
        Mode: 'FLEXIBLE'
      Target:
        Arn: !GetAtt ModuleStepFunction.Arn
        RoleArn: !Ref SchedulerExecutionRoleARN
        Input: !Sub '{"module_lambda":"${LambdaFunction.Arn}","crawlers": ["${ResourcePrefix}${CFDataName}-Crawler"]}'

  AnalyticsExecutor:
    Type: Custom::LambdaAnalyticsExecutor
    Properties:
      ServiceToken: !Ref LambdaAnalyticsARN
      Name: !Ref CFDataName
