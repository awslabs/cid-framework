AWSTemplateFormatVersion: '2010-09-09'
Description: Retrieves Inventory data for the chosen service
Transform: 'AWS::LanguageExtensions'
Parameters:
  DatabaseName:
    Type: String
    Description: Name of the Athena database to be created to hold lambda information
    Default: optimization_data
  DestinationBucket:
    Type: String
    Description: Name of the S3 Bucket to be created to hold data information
    AllowedPattern: (?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)
  DestinationBucketARN:
    Type: String
    Description: ARN of the S3 Bucket that exists or needs to be created to hold rightsizing information
  MultiAccountRoleName:
    Type: String
    Description: Name of the IAM role deployed in all accounts which can retrieve AWS Data.
  CFDataName:
    Type: String
    Description: The name of what this cf is doing.
    Default: inventory
  GlueRoleARN:
    Type: String
    Description: Arn for the Glue Crawler role
  Schedule:
    Type: String
    Description: EventBridge Schedule to trigger the data collection
    Default: "rate(14 days)"
  ResourcePrefix:
    Type: String
    Description: This prefix will be placed in front of all roles created. Note you may wish to add a dash at the end to make more readable
  RegionsInScope:
    Type: String
    Description: "Comma Delimited list of AWS regions from which data about resources will be collected. Example: us-east-1,eu-west-1,ap-northeast-1"
  LambdaAnalyticsARN:
    Type: String
    Description: Arn of lambda for Analytics
  AccountCollectorLambdaARN:
    Type: String
    Description: Arn of the Account Collector Lambda
  CodeBucket:
    Type: String
    Description: Source code bucket
  StepFunctionTemplate:
    Type: String
    Description: S3 key to the JSON template for the StepFunction
  StepFunctionExecutionRoleARN:
    Type: String
    Description: Common role for Step Function execution
  SchedulerExecutionRoleARN:
    Type: String
    Description: Common role for module Scheduler execution
  LambdaManageGlueTableARN:
    Type: String
    Description: ARN of a Lambda for Managing GlueTable
  AwsObjects:
    Type: CommaDelimitedList
    Default: OpensearchDomains, ElasticacheClusters, RdsDbInstances, EBS, AMI, Snapshot, Ec2Instances, VpcInstances, RdsDbSnapshots, EKSClusters, LambdaFunctions, RdsDbClusters
    Description: Services for pulling price data
  DataBucketsKmsKeysArns:
    Type: String
    Description: "ARNs of KMS Keys for data buckets and/or Glue Catalog. Comma separated list, no spaces. Keep empty if data Buckets and Glue Catalog are not Encrypted with KMS. You can also set it to '*' to grant decrypt permission for all the keys."
    Default: ""

Conditions:
  NeedDataBucketsKms: !Not [ !Equals [ !Ref DataBucketsKmsKeysArns, "" ] ]

Mappings:
  ServicesMap:
    OpensearchDomains:
      path: opensearch-domains
      table:
        - Name: inventory_opensearch_domains_data
          Parameters: { "classification" : "json", "compressionType": "none" }
          PartitionKeys:
          - Name: payer_id
            Type: string
          - Name: year
            Type: string
          - Name: month
            Type: string
          - Name: day
            Type: string
          StorageDescriptor:
            Columns:
            - Name: domainname
              Type: string
            - Name: domainid
              Type: string
            - Name: engineversion
              Type: string
            - Name: instancetype
              Type: string
            - Name: instancecount
              Type: int
            - Name: accountid
              Type: string
            - Name: collection_date
              Type: string
            - Name: region
              Type: string
            InputFormat: org.apache.hadoop.mapred.TextInputFormat
            Location: !Sub s3://${DestinationBucket}/inventory/inventory-opensearch-domains-data/
            OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
            SerdeInfo:
              Parameters:
                paths: DomainId,DomainName,EngineVersion,InstanceCount,InstanceType,accountid,collection_date,region
              SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
          TableType: EXTERNAL_TABLE

    ElasticacheClusters:
      path: elasticache-clusters
      table:
        - Name: inventory_elasticache_clusters_data
          Parameters: { "classification" : "json", "compressionType": "none" }
          PartitionKeys:
          - Name: payer_id
            Type: string
          - Name: year
            Type: string
          - Name: month
            Type: string
          - Name: day
            Type: string
          StorageDescriptor:
            Columns:
            - Name: cacheclusterid
              Type: string
            - Name: clientdownloadlandingpage
              Type: string
            - Name: cachenodetype
              Type: string
            - Name: engine
              Type: string
            - Name: engineversion
              Type: string
            - Name: cacheclusterstatus
              Type: string
            - Name: numcachenodes
              Type: int
            - Name: preferredavailabilityzone
              Type: string
            - Name: cacheclustercreatetime
              Type: string
            - Name: preferredmaintenancewindow
              Type: string
            - Name: pendingmodifiedvalues
              Type: string
            - Name: cachesecuritygroups
              Type: array<string>
            - Name: cacheparametergroup
              Type: struct<CacheParameterGroupName:string,ParameterApplyStatus:string,CacheNodeIdsToReboot:array<string>>
            - Name: cachesubnetgroupname
              Type: string
            - Name: autominorversionupgrade
              Type: boolean
            - Name: securitygroups
              Type: array<struct<SecurityGroupId:string,Status:string>>
            - Name: replicationgroupid
              Type: string
            - Name: snapshotretentionlimit
              Type: int
            - Name: snapshotwindow
              Type: string
            - Name: authtokenenabled
              Type: boolean
            - Name: transitencryptionenabled
              Type: boolean
            - Name: atrestencryptionenabled
              Type: boolean
            - Name: arn
              Type: string
            - Name: replicationgrouplogdeliveryenabled
              Type: boolean
            - Name: logdeliveryconfigurations
              Type: array<string>
            - Name: networktype
              Type: string
            - Name: ipdiscovery
              Type: string
            - Name: transitencryptionmode
              Type: string
            - Name: accountid
              Type: string
            - Name: collection_date
              Type: string
            - Name: region
              Type: string
            InputFormat: org.apache.hadoop.mapred.TextInputFormat
            Location: !Sub s3://${DestinationBucket}/inventory/inventory-elasticache-clusters-data/
            OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
            SerdeInfo:
              Parameters:
                paths: ARN,AtRestEncryptionEnabled,AuthTokenEnabled,AutoMinorVersionUpgrade,CacheClusterCreateTime,CacheClusterId,CacheClusterStatus,CacheNodeType,CacheParameterGroup,CacheSecurityGroups,CacheSubnetGroupName,ClientDownloadLandingPage,Engine,EngineVersion,IpDiscovery,LogDeliveryConfigurations,NetworkType,NumCacheNodes,PendingModifiedValues,PreferredAvailabilityZone,PreferredMaintenanceWindow,ReplicationGroupId,ReplicationGroupLogDeliveryEnabled,SecurityGroups,SnapshotRetentionLimit,SnapshotWindow,TransitEncryptionEnabled,TransitEncryptionMode,accountid,collection_date,region
              SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
          TableType: EXTERNAL_TABLE

    RdsDbClusters:
      path: rds-db-clusters
      table:
        - Name: inventory_rds_db_clusters_data
          TableType: EXTERNAL_TABLE

          PartitionKeys:
          - { Name: payer_id, Type: string }
          - { Name: year, Type: string }
          - { Name: month, Type: string }
          - { Name: day, Type: string }
          StorageDescriptor:
            Columns:
            - Name: readreplicaidentifiers
              Type: string
            - Name: capacity
              Type: string
            - Name: charactersetname
              Type: string
            - Name: preferredbackupwindow
              Type: string
            - Name: copytagstosnapshot
              Type: string
            - Name: activitystreamkinesisstreamname
              Type: string
            - Name: multiaz
              Type: string
            - Name: backtrackwindow
              Type: string
            - Name: earliestrestorabletime
              Type: string
            - Name: engine
              Type: string
            - Name: earliestbacktracktime
              Type: string
            - Name: httpendpointenabled
              Type: string
            - Name: percentprogress
              Type: string
            - Name: dbclusterparametergroup
              Type: string
            - Name: hostedzoneid
              Type: string
            - Name: status
              Type: string
            - Name: associatedroles
              Type: string
            - Name: dbclusteridentifier
              Type: string
            - Name: backtrackconsumedchangerecords
              Type: string
            - Name: iamdatabaseauthenticationenabled
              Type: string
            - Name: serverlessv2scalingconfiguration
              Type: string
            - Name: customendpoints
              Type: string
            - Name: port
              Type: string
            - Name: activitystreamkmskeyid
              Type: string
            - Name: masterusername
              Type: string
            - Name: dbclusterresourceid
              Type: string
            - Name: clustercreatetime
              Type: string
            - Name: vpcsecuritygroups
              Type: string
            - Name: dbsubnetgroup
              Type: string
            - Name: latestrestorabletime
              Type: string
            - Name: availabilityzones
              Type: string
            - Name: dbclusteroptiongroupmemberships
              Type: string
            - Name: replicationsourceidentifier
              Type: string
            - Name: deletionprotection
              Type: string
            - Name: endpoint
              Type: string
            - Name: preferredmaintenancewindow
              Type: string
            - Name: readerendpoint
              Type: string
            - Name: accountid
              Type: string
            - Name: enabledcloudwatchlogsexports
              Type: string
            - Name: scalingconfigurationinfo
              Type: string
            - Name: storageencrypted
              Type: string
            - Name: enginemode
              Type: string
            - Name: databasename
              Type: string
            - Name: activitystreammode
              Type: string
            - Name: crossaccountclone
              Type: string
            - Name: dbclusterarn
              Type: string
            - Name: activitystreamstatus
              Type: string
            - Name: allocatedstorage
              Type: string
            - Name: engineversion
              Type: string
            - Name: backupretentionperiod
              Type: string
            - Name: clonegroupid
              Type: string
            - Name: dbclustermembers
              Type: string
            - Name: kmskeyid
              Type: string
            - Name: collection_date
              Type: string
            - Name: region
              Type: string
            InputFormat: org.apache.hadoop.mapred.TextInputFormat
            Location: !Sub s3://${DestinationBucket}/inventory/inventory-rds-db-clusters-data/
            OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
            Parameters:
              UPDATED_BY_CRAWLER: !Sub ${ResourcePrefix}inventory-RdsDbClusters-Crawler
            SerdeInfo:
              Parameters:
                paths: readreplicaidentifiers,capacity,charactersetname,preferredbackupwindow,copytagstosnapshot,activitystreamkinesisstreamname,multiaz,backtrackwindow,earliestrestorabletime,engine,earliestbacktracktime,httpendpointenabled,payer_id,percentprogress,day,dbclusterparametergroup,hostedzoneid,status,associatedroles,dbclusteridentifier,backtrackconsumedchangerecords,iamdatabaseauthenticationenabled,serverlessv2scalingconfiguration,customendpoints,port,activitystreamkmskeyid,masterusername,dbclusterresourceid,clustercreatetime,vpcsecuritygroups,dbsubnetgroup,latestrestorabletime,availabilityzones,dbclusteroptiongroupmemberships,replicationsourceidentifier,year,deletionprotection,endpoint,preferredmaintenancewindow,readerendpoint,accountid,enabledcloudwatchlogsexports,scalingconfigurationinfo,storageencrypted,enginemode,databasename,activitystreammode,month,crossaccountclone,dbclusterarn,activitystreamstatus,allocatedstorage,engineversion,backupretentionperiod,clonegroupid,dbclustermembers,kmskeyid,collection_date,region
              SerializationLibrary: org.openx.data.jsonserde.JsonSerDe

    RdsDbInstances:
      path: rds-db-instances
      table:
        - Name: inventory_rds_db_instances_data
          TableType: EXTERNAL_TABLE
          Parameters: { "classification" : "json", "compressionType": "none" }
          PartitionKeys:
          - { Name: payer_id, Type: string }
          - { Name: year, Type: string }
          - { Name: month, Type: string }
          - { Name: day, Type: string }
          StorageDescriptor:
            Columns:
            - Name: dbinstanceidentifier
              Type: string
            - Name: dbinstanceclass
              Type: string
            - Name: engine
              Type: string
            - Name: dbinstancestatus
              Type: string
            - Name: masterusername
              Type: string
            - Name: endpoint
              Type: struct<Address:string,Port:int,HostedZoneId:string>
            - Name: allocatedstorage
              Type: int
            - Name: instancecreatetime
              Type: string
            - Name: preferredbackupwindow
              Type: string
            - Name: backupretentionperiod
              Type: int
            - Name: dbsecuritygroups
              Type: array<string>
            - Name: vpcsecuritygroups
              Type: array<struct<VpcSecurityGroupId:string,Status:string>>
            - Name: dbparametergroups
              Type: array<struct<DBParameterGroupName:string,ParameterApplyStatus:string>>
            - Name: availabilityzone
              Type: string
            - Name: dbsubnetgroup
              Type: struct<DBSubnetGroupName:string,DBSubnetGroupDescription:string,VpcId:string,SubnetGroupStatus:string,Subnets:array<struct<SubnetIdentifier:string,SubnetAvailabilityZone:struct<Name:string>,SubnetOutpost:string,SubnetStatus:string>>>
            - Name: preferredmaintenancewindow
              Type: string
            - Name: pendingmodifiedvalues
              Type: string
            - Name: latestrestorabletime
              Type: string
            - Name: multiaz
              Type: boolean
            - Name: engineversion
              Type: string
            - Name: autominorversionupgrade
              Type: boolean
            - Name: readreplicadbinstanceidentifiers
              Type: array<string>
            - Name: licensemodel
              Type: string
            - Name: iops
              Type: int
            - Name: optiongroupmemberships
              Type: array<struct<OptionGroupName:string,Status:string>>
            - Name: secondaryavailabilityzone
              Type: string
            - Name: publiclyaccessible
              Type: boolean
            - Name: storagetype
              Type: string
            - Name: dbinstanceport
              Type: int
            - Name: storageencrypted
              Type: boolean
            - Name: kmskeyid
              Type: string
            - Name: dbiresourceid
              Type: string
            - Name: cacertificateidentifier
              Type: string
            - Name: domainmemberships
              Type: array<string>
            - Name: copytagstosnapshot
              Type: boolean
            - Name: monitoringinterval
              Type: int
            - Name: enhancedmonitoringresourcearn
              Type: string
            - Name: monitoringrolearn
              Type: string
            - Name: dbinstancearn
              Type: string
            - Name: iamdatabaseauthenticationenabled
              Type: boolean
            - Name: performanceinsightsenabled
              Type: boolean
            - Name: performanceinsightskmskeyid
              Type: string
            - Name: performanceinsightsretentionperiod
              Type: int
            - Name: deletionprotection
              Type: boolean
            - Name: associatedroles
              Type: array<string>
            - Name: maxallocatedstorage
              Type: int
            - Name: taglist
              Type: array<string>
            - Name: customerownedipenabled
              Type: boolean
            - Name: activitystreamstatus
              Type: string
            - Name: backuptarget
              Type: string
            - Name: networktype
              Type: string
            - Name: storagethroughput
              Type: int
            - Name: certificatedetails
              Type: struct<CAIdentifier:string,ValidTill:string>
            - Name: dedicatedlogvolume
              Type: boolean
            - Name: isstorageconfigupgradeavailable
              Type: boolean
            - Name: accountid
              Type: string
            - Name: collection_date
              Type: string
            - Name: region
              Type: string
            - Name: dbclusteridentifier
              Type: string
            - Name: promotiontier
              Type: int
            InputFormat: org.apache.hadoop.mapred.TextInputFormat
            Location: !Sub s3://${DestinationBucket}/inventory/inventory-rds-db-instances-data/
            OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
            Parameters:
              UPDATED_BY_CRAWLER: !Sub ${ResourcePrefix}inventory-RdsDbInstances-Crawler
            SerdeInfo:
              Parameters:
                paths: ActivityStreamStatus,AllocatedStorage,AssociatedRoles,AutoMinorVersionUpgrade,AvailabilityZone,BackupRetentionPeriod,BackupTarget,CACertificateIdentifier,CertificateDetails,CopyTagsToSnapshot,CustomerOwnedIpEnabled,DBClusterIdentifier,DBInstanceArn,DBInstanceClass,DBInstanceIdentifier,DBInstanceStatus,DBParameterGroups,DBSecurityGroups,DBSubnetGroup,DbInstancePort,DbiResourceId,DedicatedLogVolume,DeletionProtection,DomainMemberships,Endpoint,Engine,EngineVersion,EnhancedMonitoringResourceArn,IAMDatabaseAuthenticationEnabled,InstanceCreateTime,Iops,IsStorageConfigUpgradeAvailable,KmsKeyId,LatestRestorableTime,LicenseModel,MasterUsername,MaxAllocatedStorage,MonitoringInterval,MonitoringRoleArn,MultiAZ,NetworkType,OptionGroupMemberships,PendingModifiedValues,PerformanceInsightsEnabled,PerformanceInsightsKMSKeyId,PerformanceInsightsRetentionPeriod,PreferredBackupWindow,PreferredMaintenanceWindow,PromotionTier,PubliclyAccessible,ReadReplicaDBInstanceIdentifiers,SecondaryAvailabilityZone,StorageEncrypted,StorageThroughput,StorageType,TagList,VpcSecurityGroups,accountid,collection_date,region
              SerializationLibrary: org.openx.data.jsonserde.JsonSerDe

    RdsDbSnapshots:
      path: rds-db-snapshots
      table:
        - Name: inventory_rds_db_snapshots_data
          Parameters: { "classification" : "json", "compressionType": "none" }
          PartitionKeys:
          - Name: payer_id
            Type: string
          - Name: year
            Type: string
          - Name: month
            Type: string
          - Name: day
            Type: string
          StorageDescriptor:
            Columns:
            - Name: dbsnapshotidentifier
              Type: string
            - Name: dbinstanceidentifier
              Type: string
            - Name: snapshotcreatetime
              Type: string
            - Name: engine
              Type: string
            - Name: allocatedstorage
              Type: int
            - Name: status
              Type: string
            - Name: port
              Type: int
            - Name: availabilityzone
              Type: string
            - Name: vpcid
              Type: string
            - Name: instancecreatetime
              Type: string
            - Name: masterusername
              Type: string
            - Name: engineversion
              Type: string
            - Name: licensemodel
              Type: string
            - Name: snapshottype
              Type: string
            - Name: iops
              Type: int
            - Name: optiongroupname
              Type: string
            - Name: percentprogress
              Type: int
            - Name: storagetype
              Type: string
            - Name: encrypted
              Type: boolean
            - Name: kmskeyid
              Type: string
            - Name: dbsnapshotarn
              Type: string
            - Name: iamdatabaseauthenticationenabled
              Type: boolean
            - Name: processorfeatures
              Type: array<string>
            - Name: dbiresourceid
              Type: string
            - Name: taglist
              Type: array<string>
            - Name: originalsnapshotcreatetime
              Type: string
            - Name: snapshottarget
              Type: string
            - Name: storagethroughput
              Type: int
            - Name: dedicatedlogvolume
              Type: boolean
            - Name: accountid
              Type: string
            - Name: collection_date
              Type: string
            - Name: region
              Type: string
            InputFormat: org.apache.hadoop.mapred.TextInputFormat
            Location: !Sub s3://${DestinationBucket}/inventory/inventory-rds-db-snapshots-data/
            OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
            SerdeInfo:
              Parameters:
                paths: AllocatedStorage,AvailabilityZone,DBInstanceIdentifier,DBSnapshotArn,DBSnapshotIdentifier,DbiResourceId,DedicatedLogVolume,Encrypted,Engine,EngineVersion,IAMDatabaseAuthenticationEnabled,InstanceCreateTime,Iops,KmsKeyId,LicenseModel,MasterUsername,OptionGroupName,OriginalSnapshotCreateTime,PercentProgress,Port,ProcessorFeatures,SnapshotCreateTime,SnapshotTarget,SnapshotType,Status,StorageThroughput,StorageType,TagList,VpcId,accountid,collection_date,region
              SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
          TableType: EXTERNAL_TABLE

    EBS:
      path: ebs
      table:
        - Name: inventory_ebs_data
          Parameters: { "classification" : "json", "compressionType": "none" }
          PartitionKeys:
          - Name: payer_id
            Type: string
          - Name: year
            Type: string
          - Name: month
            Type: string
          - Name: day
            Type: string
          StorageDescriptor:
            Columns:
            - Name: attachments
              Type: array<struct<AttachTime:string,Device:string,InstanceId:string,State:string,VolumeId:string,DeleteOnTermination:boolean>>
            - Name: availabilityzone
              Type: string
            - Name: createtime
              Type: string
            - Name: encrypted
              Type: boolean
            - Name: size
              Type: int
            - Name: snapshotid
              Type: string
            - Name: state
              Type: string
            - Name: volumeid
              Type: string
            - Name: iops
              Type: int
            - Name: volumetype
              Type: string
            - Name: multiattachenabled
              Type: boolean
            - Name: accountid
              Type: string
            - Name: collection_date
              Type: string
            - Name: region
              Type: string
            - Name: tags
              Type: array<struct<Key:string,Value:string>>
            - Name: throughput
              Type: int
            InputFormat: org.apache.hadoop.mapred.TextInputFormat
            Location: !Sub s3://${DestinationBucket}/inventory/inventory-ebs-data/
            OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
            SerdeInfo:
              Parameters:
                paths: Attachments,AvailabilityZone,CreateTime,Encrypted,Iops,MultiAttachEnabled,Size,SnapshotId,State,Tags,Throughput,VolumeId,VolumeType,accountid,collection_date,region
              SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
          TableType: EXTERNAL_TABLE

    AMI:
      path: ami
      table:
        - Name: inventory_ami_data
          Parameters: { "classification" : "json", "compressionType": "none" }
          PartitionKeys:
          - Name: payer_id
            Type: string
          - Name: year
            Type: string
          - Name: month
            Type: string
          - Name: day
            Type: string
          StorageDescriptor:
            Columns:
            - Name: architecture
              Type: string
            - Name: creationdate
              Type: string
            - Name: imageid
              Type: string
            - Name: imagelocation
              Type: string
            - Name: imagetype
              Type: string
            - Name: public
              Type: boolean
            - Name: ownerid
              Type: string
            - Name: platformdetails
              Type: string
            - Name: usageoperation
              Type: string
            - Name: state
              Type: string
            - Name: blockdevicemappings
              Type: array<struct<DeviceName:string,Ebs:struct<DeleteOnTermination:boolean,SnapshotId:string,VolumeSize:int,VolumeType:string,Encrypted:boolean>>>
            - Name: description
              Type: string
            - Name: enasupport
              Type: boolean
            - Name: hypervisor
              Type: string
            - Name: name
              Type: string
            - Name: rootdevicename
              Type: string
            - Name: rootdevicetype
              Type: string
            - Name: sriovnetsupport
              Type: string
            - Name: tags
              Type: array<struct<Key:string,Value:string>>
            - Name: virtualizationtype
              Type: string
            - Name: sourceinstanceid
              Type: string
            - Name: accountid
              Type: string
            - Name: collection_date
              Type: string
            - Name: region
              Type: string
            InputFormat: org.apache.hadoop.mapred.TextInputFormat
            Location: !Sub s3://${DestinationBucket}/inventory/inventory-ami-data/
            OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
            SerdeInfo:
              Parameters:
                paths: Architecture,BlockDeviceMappings,CreationDate,Description,EnaSupport,Hypervisor,ImageId,ImageLocation,ImageType,Name,OwnerId,PlatformDetails,Public,RootDeviceName,RootDeviceType,SourceInstanceId,SriovNetSupport,State,Tags,UsageOperation,VirtualizationType,accountid,collection_date,region
              SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
          TableType: EXTERNAL_TABLE

    Snapshot:
      path: snapshot
      table:
        - Name: inventory_snapshot_data
          Parameters: { "classification" : "json", "compressionType": "none" }
          PartitionKeys:
          - Name: payer_id
            Type: string
          - Name: year
            Type: string
          - Name: month
            Type: string
          - Name: day
            Type: string
          StorageDescriptor:
            Columns:
            - Name: description
              Type: string
            - Name: encrypted
              Type: boolean
            - Name: ownerid
              Type: string
            - Name: progress
              Type: string
            - Name: snapshotid
              Type: string
            - Name: starttime
              Type: string
            - Name: state
              Type: string
            - Name: volumeid
              Type: string
            - Name: volumesize
              Type: int
            - Name: tags
              Type: array<struct<Key:string,Value:string>>
            - Name: storagetier
              Type: string
            - Name: accountid
              Type: string
            - Name: collection_date
              Type: string
            - Name: region
              Type: string
            InputFormat: org.apache.hadoop.mapred.TextInputFormat
            Location: !Sub s3://${DestinationBucket}/inventory/inventory-snapshot-data/
            OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
            SerdeInfo:
              Parameters:
                paths: Description,Encrypted,OwnerId,Progress,SnapshotId,StartTime,State,StorageTier,Tags,VolumeId,VolumeSize,accountid,collection_date,region
              SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
          TableType: EXTERNAL_TABLE

    Ec2Instances:
      path: ec2-instances
      table:
        - Name: inventory_ec2_instances_data
          Parameters: { "classification" : "json", "compressionType": "none" }
          PartitionKeys:
          - Name: payer_id
            Type: string
          - Name: year
            Type: string
          - Name: month
            Type: string
          - Name: day
            Type: string
          StorageDescriptor:
            Columns:
            - Name: amilaunchindex
              Type: int
            - Name: imageid
              Type: string
            - Name: instanceid
              Type: string
            - Name: instancetype
              Type: string
            - Name: launchtime
              Type: string
            - Name: monitoring
              Type: struct<State:string>
            - Name: placement
              Type: struct<AvailabilityZone:string,GroupName:string,Tenancy:string>
            - Name: privatednsname
              Type: string
            - Name: privateipaddress
              Type: string
            - Name: productcodes
              Type: array<string>
            - Name: publicdnsname
              Type: string
            - Name: publicipaddress
              Type: string
            - Name: state
              Type: struct<Code:int,Name:string>
            - Name: statetransitionreason
              Type: string
            - Name: subnetid
              Type: string
            - Name: vpcid
              Type: string
            - Name: architecture
              Type: string
            - Name: blockdevicemappings
              Type: array<struct<DeviceName:string,Ebs:struct<AttachTime:string,DeleteOnTermination:boolean,Status:string,VolumeId:string>>>
            - Name: clienttoken
              Type: string
            - Name: ebsoptimized
              Type: boolean
            - Name: enasupport
              Type: boolean
            - Name: hypervisor
              Type: string
            - Name: iaminstanceprofile
              Type: struct<Arn:string,Id:string>
            - Name: networkinterfaces
              Type: array<struct<Association:struct<IpOwnerId:string,PublicDnsName:string,PublicIp:string>,Attachment:struct<AttachTime:string,AttachmentId:string,DeleteOnTermination:boolean,DeviceIndex:int,Status:string,NetworkCardIndex:int>,Description:string,Groups:array<struct<GroupName:string,GroupId:string>>,Ipv6Addresses:array<string>,MacAddress:string,NetworkInterfaceId:string,OwnerId:string,PrivateDnsName:string,PrivateIpAddress:string,PrivateIpAddresses:array<struct<Association:struct<IpOwnerId:string,PublicDnsName:string,PublicIp:string>,Primary:boolean,PrivateDnsName:string,PrivateIpAddress:string>>,SourceDestCheck:boolean,Status:string,SubnetId:string,VpcId:string,InterfaceType:string>>
            - Name: rootdevicename
              Type: string
            - Name: rootdevicetype
              Type: string
            - Name: securitygroups
              Type: array<struct<GroupName:string,GroupId:string>>
            - Name: sourcedestcheck
              Type: boolean
            - Name: tags
              Type: array<struct<Key:string,Value:string>>
            - Name: virtualizationtype
              Type: string
            - Name: cpuoptions
              Type: struct<CoreCount:int,ThreadsPerCore:int>
            - Name: capacityreservationspecification
              Type: struct<CapacityReservationPreference:string>
            - Name: hibernationoptions
              Type: struct<Configured:boolean>
            - Name: metadataoptions
              Type: struct<State:string,HttpTokens:string,HttpPutResponseHopLimit:int,HttpEndpoint:string,HttpProtocolIpv6:string,InstanceMetadataTags:string>
            - Name: enclaveoptions
              Type: struct<Enabled:boolean>
            - Name: platformdetails
              Type: string
            - Name: usageoperation
              Type: string
            - Name: urivatednsnameoptions
              Type: struct<HostnameType:string,EnableResourceNameDnsARecord:boolean,EnableResourceNameDnsAAAARecord:boolean>
            - Name: maintenanceoptions
              Type: struct<AutoRecovery:string>
            - Name: accountid
              Type: string
            - Name: collection_date
              Type: string
            - Name: region
              Type: string
            - Name: currentinstancebootmode
              Type: string
            InputFormat: org.apache.hadoop.mapred.TextInputFormat
            Location: !Sub s3://${DestinationBucket}/inventory/inventory-ec2-instances-data/
            OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
            SerdeInfo:
              Parameters:
                paths: AmiLaunchIndex,Architecture,BlockDeviceMappings,CapacityReservationSpecification,ClientToken,CpuOptions,CurrentInstanceBootMode,EbsOptimized,EnaSupport,EnclaveOptions,HibernationOptions,Hypervisor,IamInstanceProfile,ImageId,InstanceId,InstanceType,LaunchTime,MaintenanceOptions,MetadataOptions,Monitoring,NetworkInterfaces,Placement,PlatformDetails,PrivateDnsName,PrivateDnsNameOptions,PrivateIpAddress,ProductCodes,PublicDnsName,PublicIpAddress,RootDeviceName,RootDeviceType,SecurityGroups,SourceDestCheck,State,StateTransitionReason,SubnetId,Tags,UsageOperation,UsageOperationUpdateTime,VirtualizationType,VpcId,accountid,collection_date,region
          TableType: EXTERNAL_TABLE

    VpcInstances:
      path: vpc
      table:
        - Name: inventory_vpc_data
          Parameters: { "classification" : "json", "compressionType": "none" }
          PartitionKeys:
          - Name: payer_id
            Type: string
          - Name: year
            Type: string
          - Name: month
            Type: string
          - Name: day
            Type: string
          StorageDescriptor:
            Columns:
            - Name: cidrblock
              Type: string
            - Name: dhcpoptionsid
              Type: string
            - Name: state
              Type: string
            - Name: vpcid
              Type: string
            - Name: ownerid
              Type: string
            - Name: instancetenancy
              Type: string
            - Name: cidrblockassociationset
              Type: array<struct<AssociationId:string,CidrBlock:string,CidrBlockState:struct<State:string>>>
            - Name: isdefault
              Type: boolean
            - Name: accountid
              Type: string
            - Name: collection_date
              Type: string
            - Name: region
              Type: string
            InputFormat: org.apache.hadoop.mapred.TextInputFormat
            Location: !Sub s3://${DestinationBucket}/inventory/inventory-vpc-data/
            OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
            SerdeInfo:
              Parameters:
                paths: CidrBlock,CidrBlockAssociationSet,DhcpOptionsId,InstanceTenancy,IsDefault,OwnerId,State,VpcId,accountid,collection_date,region
              SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
          TableType: EXTERNAL_TABLE
    EKSClusters:
      path: eks
      table:
        - Name: inventory_eks_data
          Parameters: { "classification" : "json", "compressionType": "none" }
          PartitionKeys:
          - Name: payer_id
            Type: string
          - Name: year
            Type: string
          - Name: month
            Type: string
          - Name: day
            Type: string
          StorageDescriptor:
            Columns:
            - Name: arn
              Type: string
            - Name: name
              Type: string
            - Name: creationdate
              Type: string
            - Name: version
              Type: string
            - Name: accountid
              Type: string
            - Name: collection_date
              Type: string
            - Name: region
              Type: string
            InputFormat: org.apache.hadoop.mapred.TextInputFormat
            Location: !Sub s3://${DestinationBucket}/inventory/inventory-eks-data/
            OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
            SerdeInfo:
              Parameters:
                paths: Arn,Name,CreatedAt,Version,accountid,collection_date,region
              SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
          TableType: EXTERNAL_TABLE
    LambdaFunctions:
      path: lambda-functions
      table:
        - Name: inventory_lambda_functions_data
          Parameters: { "classification" : "json", "compressionType": "none" }
          PartitionKeys:
          - Name: payer_id
            Type: string
          - Name: year
            Type: string
          - Name: month
            Type: string
          - Name: day
            Type: string
          StorageDescriptor:
            Columns:
            - Name: functionname
              Type: string
            - Name: functionarn
              Type: string
            - Name: runtime
              Type: string
            - Name: role
              Type: string
            - Name: handler
              Type: string
            - Name: codesize
              Type: int
            - Name: description
              Type: string
            - Name: timeout
              Type: int
            - Name: memorysize
              Type: int
            - Name: lastmodified
              Type: string
            - Name: codesha256
              Type: string
            - Name: version
              Type: string
            - Name: tracingconfig
              Type: struct<mode:string>
            - Name: revisionid
              Type: string
            - Name: packagetype
              Type: string
            - Name: architectures
              Type: array<string>
            - Name: ephemeralstorage
              Type: struct<size:int>
            - Name: snapstart
              Type: struct<applyon:string,optimizationstatus:string>
            - Name: loggingconfig
              Type: struct<logformat:string,loggroup:string>
            - Name: accountid
              Type: string
            - Name: collection_date
              Type: string
            - Name: region
              Type: string
            - Name: layers
              Type: array<struct<arn:string,codesize:int>> # will be updated
            - Name: vpcconfig
              Type: struct<subnetids:array<string>,securitygroupids:array<string>,vpcid:string,ipv6allowedfordualstack:boolean>
            InputFormat: org.apache.hadoop.mapred.TextInputFormat
            Location: !Sub s3://${DestinationBucket}/inventory/inventory-lambda-functions-data/
            OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
            SerdeInfo:
              Parameters:
                paths: functionname, functionarn, runtime, role, handler, codesize, dedscription, timeout, memorysize, lastmodified, codesha256, version, tracingconfig, revisionid, packagetype, architectures, ephemeralstorage, snapstart, loggingconfig, accountid, collection_date, region, layers, vpcconfig
              SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
          TableType: EXTERNAL_TABLE

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ResourcePrefix}${CFDataName}-LambdaRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub "lambda.${AWS::URLSuffix}"
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Path: /
      Policies:
        - PolicyName: "AssumeMultiAccountRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sts:AssumeRole"
                Resource: !Sub "arn:${AWS::Partition}:iam::*:role/${MultiAccountRoleName}"
        - PolicyName: "S3Access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                Resource:
                  - !Sub "${DestinationBucketARN}/*"
        - !If 
          - NeedDataBucketsKms
          - PolicyName: "KMS"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "kms:GenerateDataKey"
                  Resource: !Split [ ',', !Ref DataBucketsKmsKeysArns ]
          - !Ref AWS::NoValue
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28 # Resource found with an explicit name, this disallows updates that require replacement of this resource
            reason: "Need explicit name to identify role actions"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ResourcePrefix}${CFDataName}-Lambda'
      Description: !Sub "Lambda Function to retrieve ${CFDataName}"
      Runtime: python3.12
      Architectures: [x86_64]
      Code:
        ZipFile: |
          """ Scan linked accounts and store instances info to s3 bucket
          Supported types: ebs, snapshots, ami, rds instances
          """
          import os
          import json
          import logging
          from functools import partial, lru_cache
          from datetime import datetime, date, timezone

          import boto3
          from botocore.client import Config

          TMP_FILE = "/tmp/data.json"
          PREFIX = os.environ['PREFIX']
          BUCKET = os.environ["BUCKET_NAME"]
          ROLENAME = os.environ['ROLENAME']
          REGIONS = [r.strip() for r in os.environ["REGIONS"].split(',') if r]
          TRACKING_TAGS = os.environ.get("TRACKING_TAGS")
          TAG_LIST = TRACKING_TAGS.split(",") if TRACKING_TAGS else []

          logger = logging.getLogger(__name__)
          logger.setLevel(getattr(logging, os.environ.get('LOG_LEVEL', 'INFO').upper(), logging.INFO))

          def to_json(obj):
              """json helper for date time data"""
              return json.dumps(
                  obj,
                  default=lambda x:
                      x.isoformat() if isinstance(x, (date, datetime)) else None
              )

          @lru_cache(maxsize=10000)
          def assume_session(account_id, region):
              """assume role in account"""
              partition = boto3.session.Session().get_partition_for_region(region_name=region)
              credentials = boto3.client('sts', region_name=region).assume_role(
                  RoleArn=f"arn:{partition}:iam::{account_id}:role/{ROLENAME}" ,
                  RoleSessionName="data_collection"
              )['Credentials']
              return boto3.session.Session(
                  aws_access_key_id=credentials['AccessKeyId'],
                  aws_secret_access_key=credentials['SecretAccessKey'],
                  aws_session_token=credentials['SessionToken']
              )

          def paginated_scan(service, account_id, function_name, region, params=None, obj_name=None):
              """ paginated scan """
              obj_name = obj_name or function_name.split('_')[-1].capitalize() + '[*]'
              session = assume_session(account_id, region)
              client = session.client(service, region_name=region)
              try:
                  yield from client.get_paginator(function_name).paginate(**(params or {})).search(obj_name)
              except Exception as exc:  #pylint: disable=broad-exception-caught
                  logger.info(f'Error in scan {function_name}/{account_id}: {exc}')

          def opensearch_domains_scan(account_id, region):
              """ special treatment for opensearch_scan """
              service = 'opensearch'
              session = assume_session(account_id, region)
              client = session.client(service, region_name=region)
              try:
                  domain_names = [name.get('DomainName') for name in client.list_domain_names().get('DomainNames', [])]
                  for domain_name in domain_names:
                      domain = client.describe_domain(DomainName=domain_name)['DomainStatus']
                      yield {
                          'DomainName': domain['DomainName'],
                          'DomainId': domain['DomainId'],
                          'EngineVersion': domain['EngineVersion'],
                          'InstanceType': domain['ClusterConfig']['InstanceType'],
                          'InstanceCount': domain['ClusterConfig']['InstanceCount'],
                      }
              except Exception as exc:  #pylint: disable=broad-exception-caught
                  logger.info(f'scan {service}/{account_id}/{region}: {exc}')

          def eks_clusters_scan(account_id, region):
              """special function to scan EKS clusters"""
              service = "eks"
              session = assume_session(account_id, region)
              client = session.client(service, region_name=region)
              try:
                  for cluster_name in (
                      client.get_paginator("list_clusters")
                      .paginate(
                          PaginationConfig={
                              "PageSize": 100,
                          }
                      )
                      .search("clusters")
                  ):
                      # Get cluster details
                      cluster = client.describe_cluster(name=cluster_name)
                      cluster_data = {
                          "Arn": cluster["cluster"]["arn"],
                          "Name": cluster["cluster"]["name"],
                          "CreatedAt": datetime.strftime(
                              cluster["cluster"]["createdAt"].astimezone(tz=timezone.utc), "%Y-%m-%dT%H:%M:%SZ"
                          ),
                          "Version": cluster["cluster"]["version"],
                      }
                      # Get node groups for the cluster
                      try:
                          node_groups = client.list_nodegroups(clusterName=cluster_name).get("nodegroups", [])
                          cluster_data["NodeGroups"] = []
                          for node_group in node_groups:
                              node_group_details = client.describe_nodegroup(clusterName=cluster_name, nodegroupName=node_group)
                              cluster_data["NodeGroups"].append({
                                  "NodeGroupName": node_group_details["nodegroup"].get("nodegroupName"),
                                  "NodeRole": node_group_details["nodegroup"].get("nodeRole"),
                                  "InstanceTypes": node_group_details["nodegroup"].get("instanceTypes",[]),
                                  "ScalingConfig": node_group_details["nodegroup"].get("scalingConfig",{}),
                                  "Subnets": node_group_details["nodegroup"].get("subnets",[]),
                                  "Status": node_group_details["nodegroup"].get("status","Unknown"),
                                  "AMIType": node_group_details["nodegroup"].get("amiType","Unknown"),
                                  "Version": node_group_details["nodegroup"].get("version","Unknown"),
                                  "CreatedAt": datetime.strftime(
                                      node_group_details["nodegroup"]["createdAt"].astimezone(tz=timezone.utc), "%Y-%m-%dT%H:%M:%SZ"
                                  ),
                              })
                      except Exception as ng_exc:  # Catch node group-specific issues
                          logger.error(f"Error fetching node groups for {cluster_name} in {region}: {ng_exc}")
                      yield cluster_data
              except Exception as exc: #pylint: disable=W0718
                  logger.error(f"Cannot get info from {account_id}/{region}: {type(exc)}-{exc}")
              return []

          def lambda_handler(event, context): #pylint: disable=unused-argument
              """ this lambda collects ami, snapshots and volumes from linked accounts
              and must be called from the corresponding Step Function to orchestrate
              """
              logger.info(f"Event data: {event}")
              if 'account' not in event or 'params' not in event  :
                  raise ValueError(
                      "Please do not trigger this Lambda manually."
                      "Find the corresponding state machine in Step Functions and Trigger from there."
                  )
              params = [p for p in event.get('params', '').split() if p]
              name = params[0]

              sub_modules = {
                  'opensearch-domains': opensearch_domains_scan, # special function for opensearch
                  'elasticache-clusters': partial(
                      paginated_scan,
                      service='elasticache',
                      function_name='describe_cache_clusters',
                      obj_name='CacheClusters'
                      # fields=['CacheClusterId', 'CacheNodeType', 'EngineVersion', 'Engine', 'NumCacheNodes', 'PreferredAvailabilityZone', 'CacheClusterCreateTime'],
                  ),
                  'rds-db-clusters': partial(
                      paginated_scan,
                      service='rds',
                      function_name='describe_db_clusters',
                      obj_name='DBClusters[*]'
                  ),
                  'rds-db-instances': partial(
                      paginated_scan,
                      service='rds',
                      function_name='describe_db_instances',
                      obj_name='DBInstances[*]'
                  ),
                  'rds-db-snapshots': partial(
                      paginated_scan,
                      service='rds',
                      function_name='describe_db_snapshots',
                      obj_name='DBSnapshots[*]'
                  ),
                  'ebs': partial(
                      paginated_scan,
                      service='ec2',
                      function_name='describe_volumes'
                  ),
                  'ami': partial(
                      paginated_scan,
                      service='ec2',
                      function_name='describe_images',
                      params={'Owners': ['self']}
                  ),
                  'snapshot': partial(
                      paginated_scan,
                      service='ec2',
                      function_name='describe_snapshots',
                      params={'OwnerIds': ['self']}
                  ),
                  'ec2-instances': partial(
                      paginated_scan,
                      service='ec2',
                      function_name='describe_instances',
                      obj_name='Reservations[*].Instances[*][]'
                  ),
                  'vpc': partial(
                      paginated_scan,
                      service='ec2',
                      function_name='describe_vpcs'
                  ),
                  'lambda-functions' : partial(
                    paginated_scan,
                    service='lambda',
                    function_name='list_functions',
                    obj_name='Functions[*]'
                  ),
                  'eks': eks_clusters_scan
              }

              account = json.loads(event["account"])
              account_id = account["account_id"]
              payer_id = account["payer_id"]
              func = sub_modules[name]
              counter = 0
              logger.info(f"Collecting {name} for account {account_id}")
              collection_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
              try:
                  with open(TMP_FILE, "w", encoding='utf-8') as file_:
                      for region in REGIONS:
                          logger.info(f"Collecting in {region}")
                          try:
                              for counter, obj in enumerate(func(account_id=account_id,region=region), start=counter + 1):
                                  obj['accountid'] = account_id
                                  if len(TAG_LIST) > 0 and "Tags" in obj:
                                      logger.debug(f"Tags enabled and found tags {obj['Tags']}")
                                      for tag in obj["Tags"]:
                                          if tag["Key"] in TAG_LIST:
                                              obj[f"tag_{tag['Key']}"] = tag["Value"]
                                  obj['collection_date'] = collection_date
                                  obj['region'] = region
                                  if 'Environment' in obj and name == 'lambda-functions':
                                      obj['Environment'] = to_json(obj['Environment']) # this property breaks crawler as it has a different key structure
                                  file_.write(to_json(obj) + "\n")
                          except Exception as exc:  #pylint: disable=broad-exception-caught
                              logger.info(f"{name} in {region}: {type(exc)} - {exc}")
                  logger.info(f"Collected {counter} total {name} instances")
                  upload_to_s3(name, account_id, payer_id)
              except Exception as exc:   #pylint: disable=broad-exception-caught
                  logger.info(f"{name}: {type(exc)} - {exc}" )

          def upload_to_s3(name, account_id, payer_id):
              """upload"""
              if os.path.getsize(TMP_FILE) == 0:
                  logger.info(f"No data in file for {name}")
                  return
              key =  datetime.now().strftime(
                  f"{PREFIX}/{PREFIX}-{name}-data/payer_id={payer_id}"
                  f"/year=%Y/month=%m/day=%d/{account_id}-%Y-%m-%d.json"
              )
              s3client = boto3.client("s3", config=Config(s3={"addressing_style": "path"}))
              try:
                  s3client.upload_file(TMP_FILE, BUCKET, key)
                  logger.info(f"Data {account_id} in s3 - {BUCKET}/{key}")
              except Exception as exc:  #pylint: disable=broad-exception-caught
                  logger.info(exc)

      Handler: 'index.lambda_handler'
      MemorySize: 5376
      Timeout: 300
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref DestinationBucket
          PREFIX: !Ref CFDataName
          ROLENAME: !Ref MultiAccountRoleName
          REGIONS: !Ref RegionsInScope

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
      RetentionInDays: 60

  'Fn::ForEach::Object':
    - AwsObject
    - !Ref AwsObjects
    - 'Crawler${AwsObject}':
        Type: AWS::Glue::Crawler
        Properties:
          Name: !Sub '${ResourcePrefix}${CFDataName}-${AwsObject}-Crawler'
          Role: !Ref GlueRoleARN
          DatabaseName: !Ref DatabaseName
          Targets:
            S3Targets:
              - Path:
                  Fn::Sub:
                  - "s3://${DestinationBucket}/inventory/inventory-${path}-data/"
                  - path: !FindInMap [ServicesMap, !Ref AwsObject, path]
          Configuration: |
            {
              "Version": 1.0,
              "Grouping": {
                "TableGroupingPolicy": "CombineCompatibleSchemas"
              },
              "CrawlerOutput": {
                "Tables": {
                  "TableThreshold": 1
                }
              }
            }
      'Table${AwsObject}':
        Type: Custom::ManageGlueTable
        Properties:
          ServiceToken: !Ref LambdaManageGlueTableARN
          TableInput: !Select [0, !FindInMap [ServicesMap, !Ref AwsObject, table]]

      'StepFunction${AwsObject}':
        Type: AWS::StepFunctions::StateMachine
        Properties:
          StateMachineName: !Sub '${ResourcePrefix}${CFDataName}-${AwsObject}-StateMachine'
          StateMachineType: STANDARD
          RoleArn: !Ref StepFunctionExecutionRoleARN
          DefinitionS3Location:
            Bucket: !Ref CodeBucket
            Key: !Ref StepFunctionTemplate
          DefinitionSubstitutions:
            AccountCollectorLambdaARN: !Ref AccountCollectorLambdaARN
            ModuleLambdaARN: !GetAtt LambdaFunction.Arn
            Crawlers: !Sub '["${ResourcePrefix}${CFDataName}-${AwsObject}-Crawler"]'
            CollectionType: "LINKED"
            Params: !FindInMap [ServicesMap, !Ref AwsObject, path]
            Module: !Ref CFDataName
            DeployRegion: !Ref AWS::Region
            Account: !Ref AWS::AccountId
            Prefix: !Ref ResourcePrefix
            Bucket: !Ref DestinationBucket
      'RefreshSchedule${AwsObject}':
        Type: AWS::Scheduler::Schedule
        Properties:
          Description: !Sub 'Scheduler for the ODC ${CFDataName} ${AwsObject} module'
          Name: !Sub '${ResourcePrefix}${CFDataName}-${AwsObject}-RefreshSchedule'
          ScheduleExpression: !Ref Schedule
          State: ENABLED
          FlexibleTimeWindow:
            MaximumWindowInMinutes: 30
            Mode: 'FLEXIBLE'
          Target:
            Arn: !GetAtt [!Sub 'StepFunction${AwsObject}', Arn]
            RoleArn: !Ref SchedulerExecutionRoleARN

  AnalyticsExecutor:
    Type: Custom::LambdaAnalyticsExecutor
    Properties:
      ServiceToken: !Ref LambdaAnalyticsARN
      Name: !Ref CFDataName

  AthenaSnaphotAMI:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Identifies snapshots connected to AMI's
      Name: inventory_snapshot_connected_to_ami
      QueryString: !Sub |
        SELECT distinct(snapshotid),volume,volumesize,starttime,snapdescription, ownerid,
        snap_ami_id, imageid, name, description, state, rootdevicetype, virtualizationtype,year, month,
        CASE
        WHEN snap_ami_id = imageid THEN 'AMI Avalible'
        WHEN snap_ami_id LIKE 'ami%' THEN 'AMI Removed'
        ELSE 'Not AMI'
        END AS status
          FROM (
        (SELECT snapshotid,
            volumeid as volume,
            volumesize,
            starttime,
            Description AS snapdescription,
            year,
            month,
            ownerid,

            CASE
            WHEN substr(Description, 1, 22) = 'Created by CreateImage' THEN
            split_part(Description,' ', 5)
            WHEN substr(Description, 2, 11) = 'Copied snap' THEN
            split_part(Description,' ', 9)
            WHEN substr(Description, 1, 22) = 'Copied for Destination' THEN
            split_part(Description,' ', 4)
            ELSE ''
            END AS snap_ami_id
        FROM ${DatabaseName}.inventory_snapshot_data
        ) AS snapshots
        LEFT JOIN
            (SELECT imageid,
            name,
            description,
            state,
            rootdevicetype,
            virtualizationtype
            FROM ${DatabaseName}.inventory_ami_data) AS ami
                ON snapshots.snap_ami_id = ami.imageid )

  AthenaSnaphotAMICUR:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Identifies snapshots connected to AMI's with CUR data
      Name: inventory_snapshot_connected_to_ami_with_CUR
      QueryString: |
          with latest_snapshot as (
                select 
                      max(date_parse(collection_date, '%Y-%m-%d %T')) as snapshot_collection_date
                FROM optimization_data.inventory_snapshot_data
                ),
          recent_snapshots as (      
                SELECT
                      Description,
                      ownerid,
                      snapshotid,
                      latest_snapshot.snapshot_collection_date,
                
                      CASE
                            WHEN substr(Description, 1, 22) = 'Created by CreateImage' THEN split_part(Description,' ', 5)
                            WHEN substr(Description, 2, 11) = 'Copied snap' THEN split_part(Description,' ', 9)
                            WHEN substr(Description, 1, 22) = 'Copied for Destination' THEN split_part(Description,' ', 4)
                            ELSE NULL
                      END AS snapshot_ami_id
                FROM optimization_data.inventory_snapshot_data
                INNER JOIN latest_snapshot ON latest_snapshot.snapshot_collection_date = date_parse(collection_date, '%Y-%m-%d %T')
          ),
          snapshot_costs as(
              SELECT
                SPLIT(line_item_resource_id,'/')[2] as snapshot_cur_id,
                SUM(CAST(line_item_unblended_cost AS DECIMAL(16,8))) AS sum_line_item_unblended_cost
              FROM
                cid_data_export.cur2
              WHERE
                product['product_name'] = 'Amazon Elastic Compute Cloud'
                AND line_item_usage_type LIKE '%%EBS%%Snapshot%%'
                AND line_item_line_item_type  =  'Usage'
              GROUP BY
                line_item_resource_id),

          latest_ami as (
                select
                      max(date_parse(collection_date, '%Y-%m-%d %T')) as ami_last_collection_date
                FROM optimization_data.inventory_ami_data
                ),
          recent_amis as (
                SELECT
                      imageid,
                      description as ami_description,
                      latest_ami.ami_last_collection_date
                FROM optimization_data.inventory_ami_data
                -- only see things that overlap
                INNER JOIN latest_ami ON latest_ami.ami_last_collection_date = date_parse(collection_date, '%Y-%m-%d %T')
          )

          SELECT
                recent_snapshots.*,
                recent_amis.*,
                CASE
                      WHEN snapshot_ami_id = imageid THEN 'AMI Available'
                      WHEN snapshot_ami_id LIKE 'ami%' THEN 'AMI Removed'
                      ELSE 'Not AMI'
                END AS status,
                snapshot_costs.sum_line_item_unblended_cost
          FROM recent_snapshots
          LEFT JOIN recent_amis ON recent_snapshots.snapshot_ami_id = recent_amis.imageid 
          LEFT JOIN snapshot_costs on recent_snapshots.snapshotid = snapshot_costs.snapshot_cur_id 
          WHERE snapshot_ami_id is not NULL
          order by snapshotid


  AthenaSnaphotAMIPricing:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Identifies snapshots connected to AMI's with Pricing data
      Name: inventory_snapshot_connected_to_ami_with_pricing
      QueryString: !Sub |
        CREATE OR REPLACE VIEW snapshot_ami_quicksight_view AS
        SELECT *,
          CASE
            WHEN snap_ami_id = imageid THEN 'AMI Available'
            WHEN snap_ami_id LIKE 'ami%' THEN 'AMI Removed' ELSE 'Not AMI'
          END AS status,
         cast(priceperunit as decimal)*volumesize as est_snap_cost
        FROM ((((
            (
              SELECT snapshotid AS snap_id,
                volumeid as volume,
                volumesize,
                starttime,
                Description AS snapdescription,
                year,
                month,
                region,
                ownerid,
                CASE
                  WHEN substr(Description, 1, 22) = 'Created by CreateImage' THEN split_part(Description, ' ', 5)
                  WHEN substr(Description, 2, 11) = 'Copied snap' THEN split_part(Description, ' ', 9)
                  WHEN substr(Description, 1, 22) = 'Copied for Destination' THEN split_part(Description, ' ', 4) ELSE ''
                END AS snap_ami_id
              FROM ${DatabaseName}.inventory_snapshot_data
            ) AS snapshots
            LEFT JOIN (
              SELECT imageid,
                name,
                description,
                state,
                rootdevicetype,
                virtualizationtype,
                month as ami_month,
                year as ami_year
              FROM ${DatabaseName}.inventory_ami_data) AS ami
            ON snapshots.snap_ami_id = ami.imageid and snapshots.month=ami.ami_month and snapshots.year = ami.ami_year
          )
          LEFT JOIN (
          SELECT
            region region_code
          , regionname
          FROM
            ${DatabaseName}.pricing_regionnames_data
        )  region ON (snapshots.region = region.region_code))
        LEFT JOIN (
          SELECT DISTINCT
            volumeid volume_mapping
          , count(DISTINCT snapshotid) snap_count
          FROM
            ${DatabaseName}.inventory_snapshot_data
          GROUP BY 1
        )  mapping ON (mapping.volume_mapping = snapshots.volume)) s
        LEFT JOIN (
          SELECT
            "product family"
          , location
          , priceperunit
          , unit
          FROM
            ${DatabaseName}.pricing_ec2_data
          WHERE ((("product family" = 'Storage Snapshot') AND (usagetype LIKE '%SnapshotUsage%')) AND ("location type" = 'AWS Region'))
        )  snap_unit_price ON (s.regionname = snap_unit_price.location))

  AthenaEBSTA:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Identifies snapshots connected to AMI's with Pricing data
      Name: inventory_ebs_with_ta_data
      QueryString: !Sub |
        SELECT *
        FROM ${DatabaseName}.inventory_ebs_data
        LEFT JOIN (
          SELECT "volume id","volume name", "volume type","volume size",status,	"monthly storage cost" ,accountid as taaccountid, category, region as taregion, year as tayear,month as tamonth
          FROM ${DatabaseName}.trusted_advisor_data
          WHERE category = 'cost_optimizing' ) ta
          ON inventory_ebs_data.volumeid = ta."volume id" and inventory_ebs_data.year = ta.tayear and inventory_ebs_data.month = ta.tamonth
        LEFT JOIN (
          SELECT
            region region_code
          , regionname
          FROM ${DatabaseName}.pricing_regionnames_data
          )  region
          ON (inventory_ebs_data.region = region.region_code)

  AthenaEBSView:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Identifies snapshots connected to AMI's with Pricing data
      Name: ebs-view
      QueryString: !Sub |
        CREATE OR REPLACE VIEW inventory_ebs_view AS
        SELECT * FROM
                    ${DatabaseName}.inventory_ebs_data
                LEFT JOIN
                (select "volume id","volume name", "volume type","volume size",	"monthly storage cost" ,accountid as ta_accountid, status, category, region as ta_region, year as ta_year ,month as ta_month
                from
                ${DatabaseName}.trusted_advisor_data
                where category = 'cost_optimizing') ta
                ON inventory_ebs_data.volumeid = ta."volume id" and inventory_ebs_data.year = ta.ta_year and inventory_ebs_data.month = ta.ta_month
                LEFT JOIN (
          SELECT
            "region" "region_code"
          , regionname
          FROM
            ${DatabaseName}.pricing_regionnames_data
        )  region ON (inventory_ebs_data.region = region.region_code)

  AthenaEBSTAPricing:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Identifies snapshots connected to AMI's with Pricing data
      Name: inventory_ebs_with_ta_data_with_pricing
      QueryString: !Sub |
        CREATE OR REPLACE VIEW ebs_quicksight_view AS
          SELECT
            volumeid
          , volumetype
          , size
          , attachments
          , iops
          , region
          , accountid
          , TRY(date_parse(createtime, '%Y-%m-%d %H:%i:%s')) date_created
          , year
          , month
          , CAST(concat(year, '-', month, '-01') AS date) billing_period
          , concat(year, '-', month) date
          , (CASE status WHEN 'warning' THEN 'Underutilised' ELSE 'Healthy' END) status
          , priceperunit
          , iop_price
          , (priceperunit * size) ebs_gb_cost
          , (priceperunit * size) ebs_cost
          , (CASE WHEN (volumetype = 'io1') THEN (iop_price * CAST(iops AS integer)) WHEN (volumetype = 'io2') THEN (iop_price * CAST(iops AS integer)) ELSE 0 END) iop_cost
          FROM
            ((${DatabaseName}.inventory_ebs_view
          LEFT JOIN (
            SELECT
              "volume api name"
            , location
            , priceperunit
            , unit
            , "product family"
            FROM
              ${DatabaseName}.pricing_ec2_data
            WHERE ("product family" = 'Storage')
          )  ebs_price ON ((inventory_ebs_view.volumetype = ebs_price."volume api name") AND (inventory_ebs_view.regionname = ebs_price.location)))
          LEFT JOIN (
            SELECT
              "volume api name"
            , location
            , priceperunit iop_price
            , unit
            , "product family"
            , usagetype
            FROM
              ${DatabaseName}.pricing_ec2_data
            WHERE ((("Product Family" = 'System Operation') AND ("volume api name" IN ('io1', 'io2'))) AND ((usagetype LIKE '%EBS:VolumeP-IOPS.io2') OR (usagetype LIKE '%EBS:VolumeP-IOPS.piops')))
          )  ebs_iops_price ON ((inventory_ebs_view.volumetype = ebs_iops_price."volume api name") AND (inventory_ebs_view.regionname = ebs_iops_price.location)))
          ORDER BY volumeid DESC

  AthenaGp3Opportunity:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Identifies gp2, io1, io2 that could move to gp3
      Name: gp3-opportunity
      QueryString: !Sub |
        WITH raw_ebs_pricedata AS (
        SELECT
            pricing_regionnames_data.region,
            map_agg(
                CASE WHEN "volume api name" = 'io1' AND unit = 'GB-Mo' THEN 'io1_GB-Mo'
                    WHEN "volume api name" = 'io2' AND unit = 'GB-month' THEN 'io2_GB-Mo'
                    WHEN "volume api name" = 'gp3' AND unit = 'GB-Mo' THEN 'gp3_GB-Mo'
                    WHEN "volume api name" = 'gp2' AND unit = 'GB-Mo' THEN 'gp2_GB-Mo'
                    WHEN "volume api name" = 'io1' AND unit = 'IOPS-Mo' THEN 'io1_IOPS-Mo'
                    WHEN "volume api name" = 'io2' AND unit = 'IOPS-Mo' AND "group" = 'EBS IOPS' THEN 'io2_IOPS-Mo_tier1'
                    WHEN "volume api name" = 'io2' AND unit = 'IOPS-Mo' AND "group" = 'EBS IOPS Tier 2' THEN 'io2_IOPS-Mo_tier2'
                    WHEN "volume api name" = 'io2' AND unit = 'IOPS-Mo' AND "group" = 'EBS IOPS Tier 3' THEN 'io2_IOPS-Mo_tier3'
                    WHEN "volume api name" = 'gp3' AND unit = 'IOPS-Mo' THEN 'gp3_IOPS-Mo'
                    WHEN "volume api name" = 'gp3' AND unit = 'GiBps-mo' THEN 'gp3_GiBps-mo'
                    ELSE unit
                END, priceperunit) kv1
        FROM ${DatabaseName}.pricing_ec2_data
        JOIN ${DatabaseName}.pricing_regionnames_data ON pricing_regionnames_data.regionname = pricing_ec2_data.location
        WHERE "volume api name" IN ('io1','io2','gp3','gp2')
        GROUP BY pricing_regionnames_data.region
        ),
        pivoted_ebs_pricedata AS (
            SELECT region,
                  kv1['io1_GB-Mo'] as io1_gb_unit_cost,
                  kv1['io2_GB-Mo'] as io2_gb_unit_cost,
                  kv1['gp2_GB-Mo'] as gp2_gb_unit_cost,
                  kv1['gp3_GB-Mo'] AS gp3_gb_unit_cost,
                  kv1['io1_IOPS-Mo'] as io1_iops_unit_cost,
                  kv1['io2_IOPS-Mo_tier1'] as io2_iops_t1_unit_cost,
                  kv1['io2_IOPS-Mo_tier2'] as io2_iops_t2_unit_cost,
                  kv1['io2_IOPS-Mo_tier3'] as io2_iops_t3_unit_cost,
                  kv1['gp3_IOPS-Mo'] as gp3_iops_unit_cost,
                  kv1['gp3_GiBps-mo']/1000. AS gp3_throughput_unit_cost
            FROM raw_ebs_pricedata
        ),
        ebs_data AS (
            SELECT
                volumeid,
                "volume name",
                "volume type",
                size,
                attachments,
                iops,
                inventory_ebs_view.region,
                accountid,
                year,
                month,
                CASE status
                    WHEN 'warning' THEN 'Underutilised'
                    ELSE 'Healthy'
                END AS status,
                CASE
                    WHEN volumetype = 'io1' THEN io1_gb_unit_cost
                    WHEN volumetype = 'io2' THEN io2_gb_unit_cost
                    WHEN volumetype = 'gp2' THEN gp2_gb_unit_cost
                END as gb_unit_cost,
                CASE
                    WHEN volumetype = 'io1' THEN io1_gb_unit_cost * size
                    WHEN volumetype = 'io2' THEN io2_gb_unit_cost * size
                    WHEN volumetype = 'gp2' THEN gp2_gb_unit_cost * size
                END as current_gb_cost,
                CASE
                    WHEN volumetype = 'io1' THEN io1_iops_unit_cost
                    WHEN volumetype = 'io2' THEN io2_iops_t1_unit_cost
                    WHEN volumetype = 'gp2' THEN 0.0
                END as iops_unit_cost,
                CASE
                    WHEN volumetype = 'io1' THEN io1_iops_unit_cost * CAST(iops AS double)
                    WHEN volumetype = 'io2' THEN io2_iops_t1_unit_cost * CAST(iops AS double)
                    WHEN volumetype = 'gp2' THEN 0.0
                END as current_iops_cost,
                gp3_gb_unit_cost,
                gp3_gb_unit_cost * size AS gp3_gb_cost,
                gp3_iops_unit_cost,
                CASE
                    WHEN cast(iops as integer) <= 3000 THEN 0.0
                    ELSE (CAST(iops AS double) - 3000.) * gp3_iops_unit_cost
                END as gp3_iops_cost,
                gp3_throughput_unit_cost,
                CASE
                    WHEN volumetype = 'io1' THEN gp3_throughput_unit_cost * 500
                    WHEN volumetype = 'io2' THEN gp3_throughput_unit_cost * 500
                    WHEN volumetype = 'gp2' AND size <= 170 THEN gp3_throughput_unit_cost * (128.0 - 125.0)
                    WHEN volumetype = 'gp2' AND size > 170 THEN gp3_throughput_unit_cost * (250.0 - 125.0)
                END AS gp3_throughput_cost
            FROM ${DatabaseName}.inventory_ebs_view
            LEFT JOIN pivoted_ebs_pricedata ON pivoted_ebs_pricedata.region = inventory_ebs_view.region
            WHERE
                volumetype in('io1', 'io2', 'gp2')
                and cast(iops as integer) < 16000 )
          SELECT
              *,
              current_gb_cost + current_iops_cost AS current_total_cost,
              gp3_gb_cost + gp3_iops_cost + gp3_throughput_cost AS gp3_total_cost,
              (current_gb_cost + current_iops_cost) - (gp3_gb_cost + gp3_iops_cost + gp3_throughput_cost) as gp3_saving
          FROM inventory_ebs_data

  AthenaBackwardCompatPricingRegionNames:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref DatabaseName
      Description: Use as needed if queries were previously dependent upon pricing_region_names, which has been renamed for standardization
      Name: backward_compat_pricing_region_names
      QueryString: !Sub |
        CREATE OR REPLACE VIEW pricing_region_names AS SELECT * FROM ${DatabaseName}.pricing_regionnames_data
